-- // Silent Aim for Da Hood without modifying Mouse.Hit or using hookmetamethod
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera

-- Configuration
local Config = {
    Enabled = true,
    PredictionVelocity = 0.165,   -- Adjust prediction value to fine-tune accuracy
    Part = "Head",                -- Body part to aim at
    ClosestToCrosshair = true,    -- Find target closest to crosshair
    Humanize = true,              -- Add slight randomness to aiming for a more human feel
    HumanizeValue = Vector3.new(0.1, 0.1, 0.1) -- Randomization values for humanizing aim
}

-- // Function to get the closest target to the crosshair
local function getClosestTarget()
    local closestTarget = nil
    local closestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(Config.Part) then
            local part = player.Character[Config.Part]
            local screenPoint, onScreen = Camera:WorldToViewportPoint(part.Position)
            local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).Magnitude

            if onScreen and distance < closestDistance then
                closestDistance = distance
                closestTarget = player
            end
        end
    end

    return closestTarget
end

-- Function to calculate aim position
local function calculateAimPosition()
    if Config.Enabled then
        local SilentTarget = getClosestTarget()
        if SilentTarget and SilentTarget.Character and SilentTarget.Character:FindFirstChild(Config.Part) then
            local targetPart = SilentTarget.Character[Config.Part]
            local targetPosition = targetPart.Position

            -- Predict movement by adding target velocity
            local velocity = SilentTarget.Character:FindFirstChild("HumanoidRootPart") and SilentTarget.Character.HumanoidRootPart.Velocity or Vector3.new(0, 0, 0)
            targetPosition = targetPosition + (velocity * Config.PredictionVelocity)

            -- Humanize aim with slight random offset if enabled
            if Config.Humanize then
                targetPosition = targetPosition + Vector3.new(
                    math.random() * Config.HumanizeValue.X - Config.HumanizeValue.X / 2,
                    math.random() * Config.HumanizeValue.Y - Config.HumanizeValue.Y / 2,
                    math.random() * Config.HumanizeValue.Z - Config.HumanizeValue.Z / 2
                )
            end

            return CFrame.new(Camera.CFrame.Position, targetPosition)
        end
    end
    return nil
end

-- Example usage: redirect aim in shooting logic
RunService.RenderStepped:Connect(function()
    local aimCFrame = calculateAimPosition()
    if aimCFrame then
        -- Example: Aim gun or handle shooting direction based on calculated aim position
        -- This depends on your game's shooting or aiming function
        -- For demonstration, let's assume we're aiming a gun tool
        if Config.Enabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Gun") then
            -- Aim gun tool or apply direction here
            -- Replace the following line with your shooting logic
            LocalPlayer.Character.Gun.CFrame = aimCFrame
        end
    end
end)
