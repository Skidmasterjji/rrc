getgenv().Atlas = {
    ['Script'] = {
        ['Show Client Stats'] = false, -- only pops up for mobile
        ['UI'] = {
            ['Enabled'] = true,
            ['UI Type'] = "Linoria" -- "Linoria = PC" mobile one soon
        },
        ['Auto Set'] = {
            ['Enabled'] = true,-- this must be enabled to use them
            ['Get Up'] = true,
            ['Seats'] = false,
            ['Boombox'] = true,
        },
    },
    ['Binds'] = {
        ['Aimbot'] = "",
        ['Target Aimbot'] = "c",
        ['Mouse Assist'] = "",
        ['Resolving'] = "v",
    },
    ['Aimbot'] = {
        ['Enabled'] = false,
        ['Prediction'] = 0.1672718,
        ['Smoothing'] = 0.4,
        ['Auto Flick'] = {
            ['Enabled'] = true,
            ['Flick To'] = "LowerTorso", -- Head UpperTorso LowerTorso HumanoidRootPart
        },
        ['AimPart'] = "HumanoidRootPart",
        ['NewPart'] = "HumanoidRootPart", -- returns back to the new aimpart
        ['AimPart Type'] = "Normal", -- "Normal", "Closest Part"
        ['Notify'] = false,
        ['Use Airshot'] = {
            ['Enabled'] = false,
            ['AirPart'] = "LowerTorso",
        },
        ['Shake'] = {
            ['Enabled'] = false,
            ['X'] = 4,
            ['Y'] = 2,
            ['Z'] = 2,
        },
    },
    ['Mouse Assist'] = {
        ['Enabled'] = true,
        ['Prediction'] = 10.52,
        ['Smoothing'] = 5,
        ['AimPart'] = "Head",
        ['NewPart'] = "HumanoidRootPart",
        ['Auto Flick'] = {
            ['Enabled'] = true,
            ['Flick To'] = "LowerTorso", -- Head UpperTorso LowerTorso HumanoidRootPart
        },
    },
    ['Silent Aim'] = {
        ['Enabled'] = false,
        ['AimPart'] = "Head",
        ['AimPart Type'] = "Normal", -- "Normal"
        ['Prediction'] = 0.1243,
        ['Use Hitchance'] = false, 
        ['Hit Chance'] = 165, 
        ['Use Airshot'] = {
            ['Enabled'] = true,
            ['AirPart'] = "LowerTorso",
        },
        ['Auto Flick'] = {
            ['Enabled'] = true,
            ['Flick To'] = "LowerTorso", -- Head UpperTorso LowerTorso HumanoidRootPart
        },
        ['FOV'] = {
            ['Visible'] = false,
            ['Thickness'] = 1,
            ['Radius'] = 120,
            ['Transparency'] = 1,
            ['Color'] = Color3.fromRGB(255,255,255),
            ['Position'] = "Middle", -- "Middle", "Cursor", "Follow Target"
        },
    },
    ['Target Aimbot'] = {
        ['Enabled'] = true,
        ['Prediction'] = 0.142291,
        ['AimPart'] = "HumanoidRootPart",
        ['NewPart'] = "HumanoidRootPart",
        ['View'] = false,
        ['Notify'] = true,
        ['Auto Flick'] = {
            ['Enabled'] = true,
            ['Flick To'] = "LowerTorso", -- Head UpperTorso LowerTorso HumanoidRootPart
        },
        ['Dot'] = {
            ['Enabled'] = true,
            ['Color'] = Color3.fromRGB(255,255,255),
            ['Size'] = 5,
            ['Rainbow'] = false,
        },
        ['Highlight'] = {
            ['Enabled'] = false,
            ['Fill Color'] = Color3.fromRGB(255,0,41),
            ['Outline Color'] = Color3.fromRGB(255,255,255),
        },
        ['Use Airshot'] = {
            ['Enabled'] = false,
            ['AirPart'] = "LowerTorso",
        },
        ['Tracer'] = {
            ['Visible'] = true,
            ['Color'] = Color3.fromRGB(255,0,41),
            ['Transparency'] = 1,
            ['Thickness'] = 1.25,
            ['Rainbow'] = false,
        },
        ['Target UI'] = {
            ['Enabled'] = true,
            ['Position'] = "Default", -- "Default", "Follow Target", "Cursor"
            ['Rainbow'] = false,
            ['Color'] = Color3.fromRGB(73,0,255),
        },
        ['Target Strafe'] = {
            ['Enabled'] = false,
            ['Auto Shoot On Strafe'] = true,
            ['Distance'] = 8,
            ['Speed'] = 10,
            ['Height'] = 3,
            ['Mode'] = "Strafe",
            ['Randomize Maximum'] = 17,
            ['Randomize Minimum'] = 2,
            ['C-Sync'] = { -- doesnt work properly on solara 
                ['Enabled'] = false,
                ['Keybind'] = "",
                ['Type'] = "Random (On Target)", -- "Random (On Target)" or "Random" or "Under Ground (On Target)"
                ['Visualize Dummy'] = false,
                ['Random Distance'] = 10, -- both "Random" and "Random (On Target)"
                ['Auto Shoot On C-Sync'] = false,
                ['Notify'] = false,
            },
        },
    },
    ['Global'] = {
        ['Enabled'] = false, -- enable this first
        ['Auto Prediction'] = false,
        ['Mode'] = "Normal", -- Normal, High
    },
    ['Networking'] = {
        ['Resolver'] = {
            ['Enabled'] = false,
            ['Notify'] = true,
            ['Method'] = "Move Direction", -- "Move Direction", "Delta" or "Recalculate" or "Move Direction (With Delay)"
            ['Move Direction Delay'] = 24, -- only use if Method is "Move Direction (With Delay)"
            ['Auto'] = {
                ['Enabled'] = true,
                ['Detection'] = -16,
            },
        },
    },
    ['Checks'] = {
        ['Visible Check'] = false, 
        ['KO Check'] = false, 
        ['Crew Check'] = false, 
        ['Friend Check'] = false, 
        ['Unlock On Self Death'] = false, 
    },
    ['Animations'] = {
        ['Enabled'] = false,
        ['Greet'] = {
            ['Enabled'] = false,
            ['Keybind'] = "",
        },
        ['Lay'] = {
            ['Enabled'] = false,
            ['Keybind'] = "",
        },
        ['Lean'] = {
            ['Enabled'] = false,
            ['Keybind'] = "",
        },
        ['Praying'] = {
            ['Enabled'] = false,
            ['Keybind'] = "",
        },
    },
    ['Gun Sorting'] = {
        ['Enabled'] = false,
        ['Keybind'] = "b", 
        ['Delete Extra'] = true, 
        ['Slots'] = { 
            "[Double-Barrel SG]",
            "[Revolver]",
            "[TacticalShotgun]",
            "[Knife]",
        }
    },
    ['World'] = {
        ['Enabled'] = false,
        ['Textures'] = { -- turning on ingame low gfx will remove the material and only leave the color
            ['Enabled'] = false,
            ['Material'] = "Brick",
            ['Color'] = Color3.fromRGB(111,13,255),
            ['Random Color'] = true,
        },
        ['Fog'] = {
            ['Enabled'] = false,
            ['Color'] = Color3.fromRGB(111,13,255),
            ['Start'] = 22,
            ['End'] = 1000,
        },
        ['Ambient'] = {
            ['Enabled'] = false,
            ['Color'] = Color3.fromRGB(111,13,255),
        },
        ['Brightness'] = {
            ['Enabled'] = false,
            ['Amount'] = 2,
        },
        ['Clock Time'] = {
            ['Enabled'] = false,
            ['Amount'] = 6,
        },
        ['World Exposure'] = {
            ['Enabled'] = false,
            ['Amount'] = 0,
        },
    },
    ['Misc'] = {
        ['Memory Spoof'] = {
            ['Enabled'] = false, -- only enable if u have ur performance stats on
            ['Minimum Memory'] = 800,
            ['Maximum Memory'] = 900,
        },
        ['Ping Spoof'] = {
            ['Enabled'] = false, -- only enable if u have ur performance stats on
            ['Spoof To'] = 30, -- do after 30 do .00 ms or .14 ms so it makes it look legit
        },
        ['Hit'] = {
            ['Enabled'] = false,
            ['Hit Sounds'] = false,
            ['Logs'] = false,
            ['Sound'] = "Skeet",
            ['Volume'] = 100,
            ['Hit Chams'] = {
                ['Enabled'] = false,
                ['Time'] = 0.45,
                ['Material'] = "Neon",
                ['Color'] = Color3.fromRGB(105, 95, 245),
                ['Transparency'] = 0,
            },
        },
        ['Fly'] = {
            ['Enabled'] = false,
            ['Speed'] = 600,
            ['Keybind'] = "",
        },
        ['Movement Speed'] = {
            ['Enabled'] = false,
            ['Speed'] = 3, -- kinda bypassed for dhs new anticheat max is 9.5 dont go above 9.5
            ['Keybind'] = "",
            ['Type'] = "CFrame",
        },
        ['Anti Lock'] = {
            ['Enabled'] = false,
            ['Show Velocity'] = false,
            ['Show Visualization'] = {
                ['Enabled'] = false,
                ['Type'] = "Line",
            },
            ['Notify'] = true,
            ['Keybind'] = "",
            ['Type'] = "Sky", -- "Sky", "Random", "Underground" "Custom", "Break Velocity", "Velocity Mutiplier"
            ['Offset'] = {
                ['X'] = 10,
                ['Y'] = 96,
                ['Z'] = 14,
            },
            ['Multiplier'] = {
                ['Power'] = 100,
            },
        },
        ['Auto Reload'] = true,
        ['Auto Stomp'] = true,
        ['Anti Slow'] = true,
        ['No Jumpcool Down'] = true,
        ["ESP"] = {
            ["Enabled"] = false, 
            ["Names"] = {
                ["Enabled"] = false, 
                ["Color"] = Color3.fromRGB(255, 255, 255),
            }, 
            ["Box"] = {
                ["Enabled"] = false, 
                ["Color"] = Color3.fromRGB(255, 255, 255)
            }, 
            ["HealthBar"] = {
                ["Enabled"] = false, 
                ["Color"] = Color3.fromRGB(0, 255, 0)
            }, 
            ["HealthText"] = {
                ["Enabled"] = false, 
                ["Color"] = Color3.fromRGB(0, 255, 0)
            }, 
            ["ArmorBar"] = {
                ["Enabled"] = false, 
                ["Color"] = Color3.fromRGB(0, 189, 255)
            }, 
            ["ArmorText"] = {
                ["Enabled"] = false, 
                ["Color"] = Color3.fromRGB(0, 189, 255)
            },
            ["Distance"] = {
                ["Enabled"] = false, 
                ["Color"] = Color3.fromRGB(255, 255, 255)
            },
            ["Tool"] = {
                ["Enabled"] = false, 
                ["Color"] = Color3.fromRGB(255, 255, 255)
            }, 
            ["Tracer"] = {
                ["Enabled"] = false,
                ["Method"] = "Screen",
                ["Thickness"] = 1,
                ["Color"] = Color3.fromRGB(255, 255, 255)
            },
        },
        ['Cone Hat'] = {
            ['Enabled'] = false,
            ['Hat Visibility'] = .35,
            ['Circle Visibility'] = 1,
            ['Height'] = .75,
            ['Radius'] = 1,
            ['Sides'] = 25,
            ['Rainbow'] = false,
            ['Color'] = Color3.fromRGB(255, 255, 255),
            ['Offset'] = Vector3.new(0, .75, 0),
        },
    },
    ['Crosshair'] = {
        ['Enabled'] = false,
        ['Color'] = Color3.fromRGB(111,13,255),
        ['Position'] = "Mouse", -- Mouse and Middle
        ['Width'] = 1,
        ['Length'] = 1,
        ['Radius'] = 20,
        ['Spinning'] = {
            ['Enabled'] = false,
            ['Speed'] = 100,
            ['Speed Presets'] = "High", -- Low Medium High
        },
        ['Resize'] = {
            ['Enabled'] = true,
            ['Speed'] = 100,
            ['Speed Presets'] = "High", -- Low Medium High
        },
    },
    ['Macro'] = {
        ['Enabled'] = false,
        ['Keybind'] = "q",
        ['Macro Type'] = "Mouse",
        ['Delay'] = 0.01,
    },
}
--[[


Sneaky Sneaky Source


















































--]]
if (not Atlas_LOADED_SCRIPT) then
local CameraTarget = nil 
local MouseTarget = nil
local TargetPlayer = nil 
local Prey = nil
local speeding = false
local Locking = false
local chatSpamTick = tick()
local GetTime = os.clock()
local LoadedTime = tick()
local antiCheattick = 0
local tau = math.pi * 2
local drawings = {}
local newvel = Vector3.new(0,0,0)
local newvel2 = Vector3.new(0,0,0)
local VisualizeCFrame = game:GetObjects("rbxassetid://8246626421")[1]; VisualizeCFrame.Humanoid:Destroy() VisualizeCFrame.Parent = workspace; VisualizeCFrame:WaitForChild("HumanoidRootPart").Velocity = Vector3.new(); VisualizeCFrame:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(9999,9999,9999); VisualizeCFrame:WaitForChild("HumanoidRootPart").Transparency = 1; VisualizeCFrame:WaitForChild("HumanoidRootPart").CanCollide = false; local hitmodule = game:GetObjects("rbxassetid://7255773215")[1]; hitmodule.Parent = game:GetService("ReplicatedStorage")
local scriptmodule = {Old = {CFrame},}
local Memory
local PingLabel
local AirCheckType = "LowerTorso"
local UserInputService = game:GetService("UserInputService")
local replicatedstorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")
local Players = game:GetService("Players")
local MP = game:GetService("MarketplaceService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local VIMP = game:GetService("VirtualInputManager")
local Client = Players.LocalPlayer
local character = Client.Character or Client.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local Guis = game:GetService("GuiService")
local humanoid = character:WaitForChild("Humanoid")
local Camera = workspace.CurrentCamera
local Inset = game:GetService("GuiService"):GetGuiInset().Y
local sound = Instance.new("Sound")
sound.Parent = Client:WaitForChild("PlayerGui") 

local sound2 = Instance.new("Sound")
sound2.Parent = Client:WaitForChild("PlayerGui") 

local Mouse = Client:GetMouse() 
local SilentFOV = Drawing.new("Circle")
SilentFOV.Visible = false
local AtlasHighlight = Instance.new("Highlight")
local AtlasHighlight2 = Instance.new("Highlight")
local SelfDotCircle = Drawing.new("Circle")
SelfDotCircle.Visible = false
SelfDotCircle.Filled = true
SelfDotCircle.Thickness = 1
SelfDotCircle.Radius = 7
SelfDotCircle.Color = Color3.fromRGB(255, 255, 255)
local SelfTracerLine = Drawing.new("Line")
SelfTracerLine.Visible = false
SelfTracerLine.Color = Color3.fromRGB(255, 255, 255)
SelfTracerLine.Thickness = 2
local TargetLine = Drawing.new("Line")
TargetLine.Visible = false
TargetLine.Color = Color3.fromRGB(255, 255, 255)
TargetLine.Thickness = 2
local Script = {Functions = {}, Friends = {}, Drawing = {}, EspPlayers = {}}

-- loadstrings
local crosshairhandler = loadstring(game:HttpGet('https://raw.githubusercontent.com/DetainedMonkey2891/crosshair-handler/main/yeah'))() 

RunService.RenderStepped:Connect(function()
    if Atlas['Silent Aim'].FOV.Position == "Middle" then 
        SilentFOV.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    elseif Atlas['Silent Aim'].FOV.Position == "Cursor" then 
        SilentFOV.Position = Vector2.new(Mouse.X,Mouse.Y+35)
    elseif Atlas['Silent Aim'].FOV.Position == "Follow Target" and Prey then
        SilentFOV.Position = Vector2.new(Camera:WorldToViewportPoint(Prey.Character[Atlas['Silent Aim'].AimPart].Position).X, Camera:worldToViewportPoint(Prey.Character[Atlas['Silent Aim'].AimPart].Position).Y)
    end
end)

RunService.heartbeat:Connect(function()
    SilentFOV.Color = Atlas['Silent Aim'].FOV.Color
    SilentFOV.Radius = Atlas['Silent Aim'].FOV.Radius
    SilentFOV.Thickness = Atlas['Silent Aim'].FOV.Thickness
    SilentFOV.Transparency = Atlas['Silent Aim'].FOV.Transparency
    SilentFOV.Visible = Atlas['Silent Aim'].FOV.Visible
    SilentFOV.NumSides = 732
    SilentFOV.Filled = false
end)

function Alive(Player)
    if Player and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") ~= nil and Player.Character:FindFirstChild("Humanoid") ~= nil and Player.Character:FindFirstChild("Head") ~= nil then
        return true
    end
    return false
end

RunService.RenderStepped:Connect(function()
    if getgenv().skybox and getgenv().theskybox == "Pink Sky" then
        Lighting.ClockTime = "12"
        Lighting.Sky.SkyboxBk = "http://www.roblox.com/asset/?id=1279987105"
        Lighting.Sky.SkyboxDn = "http://www.roblox.com/asset/?id=1279987105"
        Lighting.Sky.SkyboxFt = "http://www.roblox.com/asset/?id=1279987105"
        Lighting.Sky.SkyboxLf = "http://www.roblox.com/asset/?id=1279987105"
        Lighting.Sky.SkyboxRt = "http://www.roblox.com/asset/?id=1279987105"
        Lighting.Sky.SkyboxUp = "http://www.roblox.com/asset/?id=1279987105"
    elseif getgenv().theskybox == "Red Sky" then
        Lighting.ClockTime = "12"
        Lighting.Sky.SkyboxBk = "http://www.roblox.com/asset/?id=2571711090"
        Lighting.Sky.SkyboxDn = "http://www.roblox.com/asset/?id=2571711090"
        Lighting.Sky.SkyboxFt = "http://www.roblox.com/asset/?id=2571711090"
        Lighting.Sky.SkyboxLf = "http://www.roblox.com/asset/?id=2571711090"
        Lighting.Sky.SkyboxRt = "http://www.roblox.com/asset/?id=2571711090"
        Lighting.Sky.SkyboxUp = "http://www.roblox.com/asset/?id=2571711090"
    elseif getgenv().theskybox == "Nebula" then
        Lighting.ClockTime = "12"
        Lighting.Sky.SkyboxBk = "rbxassetid://6277563515"
        Lighting.Sky.SkyboxDn = "rbxassetid://6277565742"
        Lighting.Sky.SkyboxFt = "rbxassetid://6277567481"
        Lighting.Sky.SkyboxLf = "rbxassetid://6277569562"
        Lighting.Sky.SkyboxRt = "rbxassetid://6277583250"
        Lighting.Sky.SkyboxUp = "rbxassetid://6277586065"
    elseif getgenv().theskybox == "Dark Night" then
        Lighting.ClockTime = "12"
        Lighting.Sky.SkyboxBk = "rbxassetid://6285719338"
        Lighting.Sky.SkyboxDn = "rbxassetid://6285721078"
        Lighting.Sky.SkyboxFt = "rbxassetid://6285722964"
        Lighting.Sky.SkyboxLf = "rbxassetid://6285724682"
        Lighting.Sky.SkyboxRt = "rbxassetid://6285726335"
        Lighting.Sky.SkyboxUp = "rbxassetid://6285730635"
    elseif getgenv().theskybox == "Space" then
        Lighting.ClockTime = "12"
        Lighting.Sky.SkyboxBk = "rbxassetid://877168885"
        Lighting.Sky.SkyboxDn = "rbxassetid://877169070"
        Lighting.Sky.SkyboxFt = "rbxassetid://877169154"
        Lighting.Sky.SkyboxLf = "rbxassetid://877169233"
        Lighting.Sky.SkyboxRt = "rbxassetid://877169317"
        Lighting.Sky.SkyboxUp = "rbxassetid://877169431"
    elseif getgenv().theskybox == "Purple Sky" then
        Lighting.ClockTime = "12"
        Lighting.Sky.SkyboxBk = "http://www.roblox.com/asset/?id=9971120429"
        Lighting.Sky.SkyboxDn = "http://www.roblox.com/asset/?id=9971120429"
        Lighting.Sky.SkyboxFt = "http://www.roblox.com/asset/?id=9971120429"
        Lighting.Sky.SkyboxLf = "http://www.roblox.com/asset/?id=9971120429"
        Lighting.Sky.SkyboxRt = "http://www.roblox.com/asset/?id=9971120429"
        Lighting.Sky.SkyboxUp = "http://www.roblox.com/asset/?id=9971120429"
    elseif getgenv().theskybox == "Green Sky" then
        Lighting.ClockTime = "12"
        Lighting.Sky.SkyboxBk = "http://www.roblox.com/asset/?id=8754359769"
        Lighting.Sky.SkyboxDn = "http://www.roblox.com/asset/?id=8754359769"
        Lighting.Sky.SkyboxFt = "http://www.roblox.com/asset/?id=8754359769"
        Lighting.Sky.SkyboxLf = "http://www.roblox.com/asset/?id=8754359769"
        Lighting.Sky.SkyboxRt = "http://www.roblox.com/asset/?id=8754359769"
        Lighting.Sky.SkyboxUp = "http://www.roblox.com/asset/?id=8754359769"
    end
end)

RunService.heartbeat:Connect(function()
    local Position, OnScreen = Camera:WorldToViewportPoint(Client.Character:WaitForChild("HumanoidRootPart").Position + (Client.Character:WaitForChild("HumanoidRootPart").AssemblyLinearVelocity * 0.1))
    if Atlas.Misc['Anti Lock']['Show Visualization'].Enabled and OnScreen and Atlas.Misc['Anti Lock']['Show Visualization'].Type == "Dot" then
        SelfTracerLine.Visible = false
        SelfDotCircle.Visible = true
        SelfDotCircle.Position = Vector2.new(Position.X, Position.Y)
    elseif Atlas.Misc['Anti Lock']['Show Visualization'].Enabled and OnScreen and Atlas.Misc['Anti Lock']['Show Visualization'].Type == "Line" then
        SelfTracerLine.Visible = true
        SelfDotCircle.Visible = false
        SelfTracerLine.From = UserInputService:GetMouseLocation()
        SelfTracerLine.To = Vector2.new(Position.X, Position.Y)
    else
        SelfTracerLine.Visible = false
        SelfDotCircle.Visible = false
    end
end)

getgenv().crosshair.enabled = Atlas.Crosshair.Enabled
getgenv().crosshair.mode = Atlas.Crosshair.Position
getgenv().crosshair.width = Atlas.Crosshair.Width
getgenv().crosshair.length = Atlas.Crosshair.Length
getgenv().crosshair.radius = Atlas.Crosshair.Radius
getgenv().crosshair.color = Atlas.Crosshair.Color
getgenv().crosshair.spin = Atlas.Crosshair.Spinning.Enabled
getgenv().crosshair.spin_speed = Atlas.Crosshair.Spinning.Speed
getgenv().crosshair.resize = Atlas.Crosshair.Resize.Enabled
getgenv().crosshair.resize_speed = Atlas.Crosshair.Resize.Speed

Atlas.Checks['KO Check'] = getgenv().KOCheck
Atlas.Checks['Unlock On Self Death'] = getgenv().UnlockOnSelfDeath
Atlas.Checks['Crew Check'] = getgenv().CrewCheck
Atlas.Checks['Friend Check'] = getgenv().FriendCheck
Atlas.Checks['Visible Check'] = getgenv().VisibleCheck
Atlas.Checks['Forcefield Check'] = getgenv().FFCheck

Atlas['Target Aimbot']['Target Strafe']['C-Sync'].Enabled = getgenv().csyncenabled
Atlas['Target Aimbot']['Target Strafe']['C-Sync'].Type = getgenv().csynctype
Atlas['Target Aimbot']['Target Strafe']['C-Sync']['Random Distance'] = getgenv().csyncrandomdistance
Atlas['Target Aimbot']['Target Strafe']['C-Sync']['Visualize Dummy'] = getgenv().visualizedummy
Atlas['Target Aimbot']['Target Strafe']['C-Sync']['Auto Shoot On C-Sync'] = getgenv().csyncautoshoot

Atlas.Misc['Anti Lock'].Enabled = getgenv().antienabled
Atlas.Misc['Anti Lock'].Keybind = getgenv().antilockkeybind
Atlas.Misc['Anti Lock'].Notify = getgenv().antinotify

local Notifications = {Notifs = {}};
local TweenService = TweenService;
local ScreenGui = Instance.new("ScreenGui", RunService:IsStudio() and Client.PlayerGui or game.CoreGui)
ScreenGui.Name = "ScreenGui"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
--
function Notifications:updateNotifsPositions(position)
	for i, v in pairs(Notifications.Notifs) do 
		local Position = Vector2.new(20, 20)
		TweenService:Create(v.Container, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Position = UDim2.new(0,Position.X,0,Position.Y + (i * 25))}):Play()
	end 
end

function Notifications:Notification(message, duration, color, flash)
	local notification = {Container = nil, Objects = {}}
	--
	local Position = Vector2.new(20, 20)
	--
	local NewInd = Instance.new("Frame")
	NewInd.Name = "NewInd"
	NewInd.AutomaticSize = Enum.AutomaticSize.X
	NewInd.Position = UDim2.new(0,20,0,20)
	NewInd.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	NewInd.BackgroundTransparency = 1
	NewInd.BorderColor3 = Color3.fromRGB(0, 0, 0)
	NewInd.Size = UDim2.fromOffset(0, 20)
	NewInd.Parent = ScreenGui
	notification.Container = NewInd

	local ActualInd = Instance.new("Frame")
	ActualInd.Name = "ActualInd"
	ActualInd.AutomaticSize = Enum.AutomaticSize.X
	ActualInd.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	ActualInd.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ActualInd.Size = UDim2.fromScale(1, 1)
	ActualInd.BackgroundTransparency = 1

	local Accent = Instance.new("Frame")
	Accent.Name = "Accent"
	Accent.BackgroundColor3 = color or Color3.fromRGB(255,255,255)
	Accent.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Accent.Size = UDim2.new(0, 2, 1, 0)
	Accent.ZIndex = 2
	Accent.BackgroundTransparency = 1

	local UIGradient = Instance.new("UIGradient")
	UIGradient.Name = "UIGradient"
	UIGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(55, 55, 55)),
	})
	UIGradient.Parent = Accent

	Accent.Parent = ActualInd

	local IndInline = Instance.new("Frame")
	IndInline.Name = "IndInline"
	IndInline.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	IndInline.BorderColor3 = Color3.fromRGB(0, 0, 0)
	IndInline.BorderSizePixel = 0
	IndInline.Position = UDim2.fromOffset(1, 1)
	IndInline.Size = UDim2.new(1, -2, 1, -2)
	IndInline.BackgroundTransparency = 1

	local UIGradient1 = Instance.new("UIGradient")
	UIGradient1.Name = "UIGradient"
	UIGradient1.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(170, 170, 170)),
	})
	UIGradient1.Rotation = 90
	UIGradient1.Parent = IndInline

	local TextLabel = Instance.new("TextLabel")
	TextLabel.Name = "TextLabel"
	TextLabel.Font = Enum.Font.GothamBold
	TextLabel.Text = message
	TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel.TextSize = 13
	TextLabel.TextStrokeTransparency = 0
	TextLabel.AutomaticSize = Enum.AutomaticSize.X
	TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel.BackgroundTransparency = 1
	TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TextLabel.BorderSizePixel = 0
	TextLabel.Position = UDim2.fromOffset(6, 0)
	TextLabel.Size = UDim2.fromScale(0, 1)
	TextLabel.Parent = IndInline
	TextLabel.TextTransparency = 1

	local UIPadding = Instance.new("UIPadding")
	UIPadding.Name = "UIPadding"
	UIPadding.PaddingRight = UDim.new(0, 6)
	UIPadding.Parent = IndInline

	IndInline.Parent = ActualInd

	ActualInd.Parent = NewInd


	function notification:remove()
		table.remove(Notifications.Notifs, table.find(Notifications.Notifs, notification))
		Notifications:updateNotifsPositions(Position)
		task.wait(0.5)
		NewInd:Destroy()
	end
	
	function notification:updatetext(new)
		TextLabel.Text = new
	end

	task.spawn(function()
		ActualInd.AnchorPoint = Vector2.new(1,0)
		for i,v in next, NewInd:GetDescendants() do
			if v:IsA("Frame") then
				TweenService:Create(v, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
			elseif v:IsA("UIStroke") then
				TweenService:Create(v, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Transparency = 0.8}):Play()
			end
		end
		local Tween1 = TweenService:Create(ActualInd, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {AnchorPoint = Vector2.new(0,0)}):Play()
		TweenService:Create(TextLabel, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
		task.wait(duration)
		for i,v in next, NewInd:GetDescendants() do
			if v:IsA("Frame") then
				TweenService:Create(v, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
			elseif v:IsA("UIStroke") then
				TweenService:Create(v, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Transparency = 1}):Play()
			end
		end
		TweenService:Create(TextLabel, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {TextTransparency = 1}):Play()
	end)

	task.delay(duration + 0.1, function()
		notification:remove()
	end)
	table.insert(Notifications.Notifs, notification)
	Notifications:updateNotifsPositions(Position)
	NewInd.Position = UDim2.new(0,Position.X,0,Position.Y + (table.find(Notifications.Notifs, notification) * 25))
	return notification
end

local Games = {
    [2788229376]                     = {Name = "Da Hood", Arg = "UpdateMousePosI2", Remote = "MainEvent"},
    [18533033546]                    = {Name = "OG of Dahood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18946556699]                    = {Name = "Hood Tracing", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [10274181]                       = {Name = "Arab Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [16033173781]                    = {Name = "Da Hood Macro", Arg = "UpdateMousePosI2", Remote = "MainEvent"},
    [7213786345]                     = {Name = "Da Hood VC", Arg = "UpdateMousePosI2", Remote = "MainEvent"},
    [9825515356]                     = {Name = "Hood Customs", Arg = "MousePosUpdate", Remote = "MainEvent"},
    [17895632819]                    = {Name = "Hood Spirit", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [5602055394]                     = {Name = "Hood Modded", Arg = "MousePos", Remote = "Bullets"},
    [7951883376]                     = {Name = "Hood Modded VC", Arg = "MousePos", Remote = "Bullets"},
    [77505463518573]                = {Name = "Da Downhill", Arg = "MOUSE", Remote = "MAINEVENT"},
    [14412601883]                    = {Name = "Hood Bank", Arg = "MOUSE", Remote = "MAINEVENT"},
    [126200045632926]                = {Name = "Da Uphill", Arg = "MOUSE", Remote = "MAINEVENT"},
    [11143225577]                    = {Name = "1v1 Hood Aim Trainer", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [14413712255]                    = {Name = "Hood Aim", Arg = "MOUSE", Remote = "MAINEVENT"},
    [16747005904]                    = {Name = "Dah Aim Trainer", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18262165591]                    = {Name = "Da Hood Aim Trainer", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18591761247]                    = {Name = "Adopt Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [17109142105]                    = {Name = "Da Battles", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [15186202290]                    = {Name = "Da Strike", Arg = "MOUSE", Remote = "MAINEVENT"},
    [18710690149]                    = {Name = "Del Hood Aim", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [17897702920]                    = {Name = "OG Da Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [14975320521]                    = {Name = "Ar Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [17200018150]                    = {Name = "Hood Of AR", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [17723797487]                    = {Name = "Dee Hood", Arg = "UpdateMousePosI", Remote = "MainEvent"},
    [17897702920]                    = {Name = "Og Da Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [17809101348]                    = {Name = "New Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [17344804827]                    = {Name = "Yeno Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [16435867341]                    = {Name = "Mad Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18128019573]                    = {Name = "Da Fights", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [17079102898]                    = {Name = "italian hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18189029275]                    = {Name = "hood z", Arg = "UpdateMousePosition", Remote = "MainEvent"},
    [17718959553]                    = {Name = "bell hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [14277620939]                    = {Name = "custom ffa", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18100659835]                    = {Name = "hood blatant", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [13504008904]                    = {Name = "dk hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [120782699795136]                = {Name = "Wood Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18209866987]                    = {Name = "1v1 Hood 2", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18533033546]                    = {Name = "Dahood OG 2021", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18128296193]                    = {Name = "Da Center", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [138831788033519]                = {Name = "Da Bank", Arg = "MOUSE", Remote = "MAINEVENT"},
    [14800398569]                    = {Name = "United Hood Aim Trainer", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18128226573]                    = {Name = "Da Military", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [16871610060]                    = {Name = "Comp Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [18942396210]                    = {Name = "Dor Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [107695061804464]                = {Name = "Da Craft", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [17721393836]                    = {Name = "The Hood Customs", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [130633951564639]                = {Name = "Da Bot Aim Trainer", Arg = "MOUSE", Remote = "MAINEVENT"},
    [74987106835953]                 = {Name = "OG Dal Hood [FANMADE]", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [10437533194]                    = {Name = "Wa Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
    [75198977602484]                 = {Name = "Co Hood", Arg = "UpdateMousePos", Remote = "MainEvent"},
}

local function get_instance(from,name)
    if from ~= nil and name ~= nil then
        local inst = from:FindFirstChildOfClass(name)
        if not inst then
            inst = from:FindFirstChild(name)
        end
        if inst then
            return inst
        end
    end
end

local function GetTool()
    local Character = Client.Character 
    local Tool = nil 
    if (not Character) then 
        return Tool
    end
    for _, v in pairs(Character:GetChildren()) do 
        if (not v:IsA('Tool')) then
            continue 
        end 
        if (v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo')) then 
            Tool = v 
        end
    end
    return Tool
end
local VisibleCheck = function (Part, PartDescendant)
    local Character = Client.Character or Client.CharacterAdded.Wait(Client.CharacterAdded)
    local Origin = Camera.CFrame.Position
    local _, OnScreen = Camera.WorldToViewportPoint(Camera, Part.Position)

    if (OnScreen) then
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {Character, Camera}

        local Result = Workspace.Raycast(Workspace, Origin, Part.Position - Origin, raycastParams)

        if (Result) then
            local PartHit = Result.Instance
            local Visible = (not PartHit or Instance.new("Part").IsDescendantOf(PartHit, PartDescendant))

            return Visible
        end
    end
    return false
end

local function ClosestTargetAimbotPlr()
    local Player = nil
    local Distance = math.huge

    for i, v in pairs(Players:GetPlayers()) do
        if (v == Client) then
             continue
        end

        local Character = v.Character
        local RootPart  = Character and Character:FindFirstChild('HumanoidRootPart')


        if getgenv().VisibleCheck then
            if Camera:WorldToScreenPoint(v.Character[Atlas['Target Aimbot'].AimPart].Position) and VisibleCheck(v.Character[Atlas['Target Aimbot'].AimPart], v.Character) then
                if (Character and RootPart) then
                    local Pos = Camera:WorldToViewportPoint(RootPart.Position)
                    local Mag = (Vector2.new(Pos.x, Pos.y) - UserInputService:GetMouseLocation()).magnitude

                    if (Mag < Distance) then
                        Distance = Mag
                        Player = v
                    end
                end
            end
        else
            if (Character and RootPart) then
                local Pos = Camera:WorldToViewportPoint(RootPart.Position)
                local Mag = (Vector2.new(Pos.x, Pos.y) - UserInputService:GetMouseLocation()).magnitude

                if (Mag < Distance) then
                    Distance = Mag
                    Player = v
                end
            end
        end
    end

    return Player
end

Client:GetMouse().KeyDown:Connect(function(Key)
    if (Key == Atlas.Binds.Aimbot) and Atlas.Aimbot.Enabled then
        Locking = not Locking
        if Locking then
            CameraTarget = getClosestPlayerToCursor()
            if Atlas.Aimbot.Notify and CameraTarget then
                Notifications:Notification("Locked Onto: "..CameraTarget.DisplayName.."", 3, false)
            end
        else
            if CameraTarget then
                CameraTarget = nil
                if Atlas.Aimbot.Notify then
                    Notifications:Notification("Unlocked",3, false)
                end
            end
        end
    end
end)

Client:GetMouse().KeyDown:Connect(function(Key)
    if (Key == Atlas.Binds['Mouse Assist']) and Atlas['Mouse Assist'].Enabled then
        Aiming = not Aiming
        if Aiming then
            MouseTarget = MousePlayer()
            if Atlas['Mouse Assist'].Notify and MouseTarget then
                Notifications:Notification("Locked Onto: "..MouseTarget.DisplayName.."", 3, false)
            end
        else
            if MouseTarget then
                MouseTarget = nil
                if Atlas['Mouse Assist'].Notify then
                    Notifications:Notification("Unlocked",3, false)
                end
            end
        end
    end
end)

Client:GetMouse().KeyDown:Connect(function(Key)
    if (Key == Atlas.Binds['Target Aimbot']) and Atlas['Target Aimbot'].Enabled then
        TargetL = not TargetL
        if TargetL then
            TargetPlayer = ClosestTargetAimbotPlr()
            if Atlas['Target Aimbot'].View then
                Camera.CameraSubject = TargetPlayer.Character
            end
            if Atlas['Target Aimbot'].Notify and TargetPlayer then
                Notifications:Notification("Targetting: "..TargetPlayer.DisplayName.."", 3, false)
            end
            if Atlas['Target Aimbot'].Highlight.Enabled then
                AtlasHighlight2.Parent = TargetPlayer.Character
                AtlasHighlight2.Adornee = TargetPlayer.Character
                AtlasHighlight2.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                AtlasHighlight2.FillColor = Atlas['Target Aimbot'].Highlight['Fill Color'] or getgenv().fillcolor
                AtlasHighlight2.OutlineColor = Atlas['Target Aimbot'].Highlight['Outline Color'] or getgenv().outlinecolor
            end
        else
            if TargetPlayer then
                TargetPlayer = nil
            end
            if Atlas['Target Aimbot'].View then
                Camera.CameraSubject = Client.Character.Humanoid
            end
            if Atlas['Target Aimbot'].Notify then
                Notifications:Notification("Unlocked",3, false)
            end
            if Atlas['Target Aimbot'].Highlight then
                AtlasHighlight2.Parent = game.CoreGui
            end
        end
    end
end)

get_calculated_velocity = function(obj, delta)
    if obj.Character:FindFirstChild("HumanoidRootPart") then
        local Character, RootPart = obj.Character, obj.Character:FindFirstChild("HumanoidRootPart")

        local currentPosition = RootPart.Position
        local currentTime = tick() 
        
        task.wait(Interval)

        local newPosition = RootPart.Position
        local newTime = tick()
        
        local distanceTraveled = (newPosition - currentPosition) 

        local timeInterval = newTime - currentTime
        local velocity = distanceTraveled / timeInterval
        currentPosition = newPosition
        currentTime = newTime
        RootPart.Velocity = velocity
    end
end

RunService.heartbeat:Connect(function()
    if Atlas.Networking.Resolver.Enabled then
        if TargetPlayer then
        local targetbone3 = TargetPlayer.Character[Atlas['Target Aimbot'].AimPart]
        if Atlas.Networking.Resolver.Method == "Move Direction" then 
            targetbone3.Velocity = TargetPlayer.Character.Humanoid.MoveDirection * TargetPlayer.Character.Humanoid.WalkSpeed
            targetbone3.AssemblyLinearVelocity = TargetPlayer.Character.Humanoid.MoveDirection * TargetPlayer.Character.Humanoid.WalkSpeed
        elseif Atlas.Networking.Resolver.Method == "Recalculate" then 
            get_calculated_velocity(TargetPlayer)
        elseif Atlas.Networking.Resolver.Method == "Move Direction (With Delay)" then 
            targetbone3.Velocity = TargetPlayer.Character.Humanoid.MoveDirection * Atlas.Networking.Resolver['Move Direction Delay']
            targetbone3.AssemblyLinearVelocity = TargetPlayer.Character.Humanoid.MoveDirection * Atlas.Networking.Resolver['Move Direction Delay']
        end
    end
end
end)

RunService.heartbeat:Connect(function()
    if Atlas.Networking.Resolver.Enabled then
        if CameraTarget then
        local targetbone1 = CameraTarget.Character[Atlas.Aimbot.AimPart]
        if Atlas.Networking.Resolver.Method == "Move Direction" then 
            targetbone1.Velocity = CameraTarget.Character.Humanoid.MoveDirection * CameraTarget.Character.Humanoid.WalkSpeed
            targetbone1.AssemblyLinearVelocity = CameraTarget.Character.Humanoid.MoveDirection * CameraTarget.Character.Humanoid.WalkSpeed
        elseif Atlas.Networking.Resolver.Method == "Recalculate" then 
            get_calculated_velocity(CameraTarget)
        elseif Atlas.Networking.Resolver.Method == "Move Direction (With Delay)" then 
            targetbone1.Velocity = CameraTarget.Character.Humanoid.MoveDirection * Atlas.Networking.Resolver['Move Direction Delay']
            targetbone1.AssemblyLinearVelocity = CameraTarget.Character.Humanoid.MoveDirection * Atlas.Networking.Resolver['Move Direction Delay']
        end
    end
end
end)

RunService.heartbeat:Connect(function()
    if Atlas.Networking.Resolver.Enabled then
        if Prey then
        local targetbone2 = Prey.Character[Atlas['Silent Aim'].AimPart]
        if Atlas.Networking.Resolver.Method == "Move Direction" then 
            targetbone2.Velocity = Prey.Character.Humanoid.MoveDirection * Prey.Character.Humanoid.WalkSpeed
            targetbone2.AssemblyLinearVelocity = Prey.Character.Humanoid.MoveDirection * Prey.Character.Humanoid.WalkSpeed
        elseif Atlas.Networking.Resolver.Method == "Recalculate" then 
            get_calculated_velocity(Prey)
        elseif Atlas.Networking.Resolver.Method == "Move Direction (With Delay)" then 
            targetbone2.Velocity = Prey.Character.Humanoid.MoveDirection * Atlas.Networking.Resolver['Move Direction Delay']
            targetbone2.AssemblyLinearVelocity = Prey.Character.Humanoid.MoveDirection * Atlas.Networking.Resolver['Move Direction Delay']
        end
    end
end
end)

RunService.heartbeat:Connect(function()
    AtlasHighlight2.FillColor = Atlas['Target Aimbot'].Highlight['Fill Color'] or getgenv().fillcolor
    AtlasHighlight2.OutlineColor = Atlas['Target Aimbot'].Highlight['Outline Color'] or getgenv().outlinecolor
end)

function WallChecks(destination, ignore)
	if (getgenv().VisibleCheck) then
		local Origin = Camera.CFrame.p
		local CheckRay = Ray.new(Origin, destination - Origin)
		local Hit = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(CheckRay, ignore)
		return Hit == nil
	else
		return true
	end
end

function WallCheckRB(destination, ignore)
	if (getgenv().LETMENOTGOCRAZYBEHINDAWALL) then
		local Origin = Camera.CFrame.p
		local CheckRay = Ray.new(Origin, destination - Origin)
		local Hit = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(CheckRay, ignore)
		return Hit == nil
	else
		return true
	end
end

RayCastCheck = function(Part, PartDescendant)
    local Character = Client.Character or Client.CharacterAdded.Wait(Client.CharacterAdded)
    local Origin = Camera.CFrame.Position
    local RayCastParams = RaycastParams.new()
    RayCastParams.FilterType = Enum.RaycastFilterType.Blacklist
    RayCastParams.FilterDescendantsInstances = {Character, Camera}
    local Result = Workspace.Raycast(Workspace, Origin, Part.Position - Origin, RayCastParams)
    if (Result) then
        local PartHit = Result.Instance
        local Visible = (not PartHit or Instance.new("Part").IsDescendantOf(PartHit, PartDescendant))
        return Visible
    end
    return
end

FindCrew = function(Player)
    if Player:FindFirstChild("DataFolder") and Player.DataFolder:FindFirstChild("Information") and Player.DataFolder.Information:FindFirstChild("Crew") and Client:FindFirstChild("DataFolder") and Client.DataFolder:FindFirstChild("Information") and Client.DataFolder.Information:FindFirstChild("Crew") then
        if Client.DataFolder.Information:FindFirstChild("Crew").Value ~= nil and Player.DataFolder.Information:FindFirstChild("Crew").Value ~= nil and Player.DataFolder.Information:FindFirstChild("Crew").Value ~= "" and Client.DataFolder.Information:FindFirstChild("Crew").Value ~= "" then 
            return true
        end
    end
    return false
end
    
function getClosestPlayerToCursor()
    local closestDist = math.huge
    local closestPlr = nil
    for _, v in ipairs(Players:GetPlayers()) do
        if v ~= Client and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
            local screenPos, cameraVisible = Camera:WorldToViewportPoint(v.Character:WaitForChild("HumanoidRootPart").Position)
            if cameraVisible then
                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if distToMouse < closestDist and WallChecks(v.Character.Head.Position, {Client,v.Character}) then
                    closestPlr = v
                    closestDist = distToMouse
                end
            end
            if getgenv().CrewCheck and FindCrew(v) and v.DataFolder.Information:FindFirstChild("Crew").Value == Client.DataFolder.Information:FindFirstChild("Crew").Value then
                continue
            end
            if getgenv().FriendCheck and Client:IsFriendsWith(v.UserId) then
                continue
            end
        end
    end
    return closestPlr
end

function MousePlayer()
    local closestDist = math.huge
    local closestPlr = nil
    for _, v in ipairs(Players:GetPlayers()) do
        if v ~= Client and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
            local screenPos, cameraVisible = Camera:WorldToViewportPoint(v.Character:WaitForChild("HumanoidRootPart").Position)
            if cameraVisible then
                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if distToMouse < closestDist and WallChecks(v.Character.Head.Position, {Client,v.Character}) then
                    closestPlr = v
                    closestDist = distToMouse
                end
            end
            if getgenv().CrewCheck and FindCrew(v) and v.DataFolder.Information:FindFirstChild("Crew").Value == Client.DataFolder.Information:FindFirstChild("Crew").Value then
                continue
            end
            if getgenv().FriendCheck and Client:IsFriendsWith(v.UserId) then
                continue
            end
        end
    end
    return closestPlr
end

function getClosestPartToCursor(Player)
    local closestPart, closestDist = nil, math.huge
    if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Head") and Player.Character.Humanoid.Health ~= 0 and Player.Character:FindFirstChild("HumanoidRootPart") then
        for i, part in pairs(Player.Character:GetChildren()) do
            if part:IsA("BasePart") then
                local screenPos, cameraVisible = Camera:WorldToViewportPoint(part.Position)
                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if distToMouse < closestDist then
                    closestPart = part
                    closestDist = distToMouse
                end
            end
        end
        return closestPart
    end
end

RunService.heartbeat:Connect(function()
    if Atlas.Aimbot['AimPart Type'] == "Closest Part" and Atlas.Aimbot.Enabled then
        Atlas.Aimbot.AimPart = tostring(getClosestPartToCursor(CameraTarget))
    end
    if Atlas.Aimbot['AimPart Type'] == "Normal" and Atlas.Aimbot.Enabled then
        Atlas.Aimbot.AimPart = Atlas.Aimbot.AimPart
    end
end)

RunService.RenderStepped:Connect(function()
    if CameraTarget and CameraTarget.Character then
        if Atlas.Aimbot['Use Airshot']['Enabled']  then
            AirCheckType = CameraTarget.Character.Humanoid.FloorMaterial == Enum.Material.Air
        else
            AirCheckType = CameraTarget.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall
        end
        if Atlas.Aimbot.Enabled and Atlas.Aimbot['Use Airshot']['Enabled'] and AirCheckType then
            Atlas.Aimbot.AimPart = Atlas.Aimbot['Use Airshot']['AirPart']
        else
            Atlas.Aimbot.AimPart = Atlas.Aimbot.NewPart
        end
    end
end)

-- // Silent Aim

local function getClosestChar()
    local target, closestDist = nil, math.huge
    local mousePos = Vector2.new(Mouse.X, Mouse.Y)

    for _, v in pairs(Players:GetPlayers()) do
        if v.Character and v ~= Client and v.Character:FindFirstChild("HumanoidRootPart") then
            if getgenv().CrewCheck and FindCrew(v) and v.DataFolder.Information:FindFirstChild("Crew").Value == Client.DataFolder.Information:FindFirstChild("Crew").Value then
                continue 
            end
            if getgenv().FriendCheck and Client:IsFriendsWith(v.UserId) then
                continue 
            end

            local closestPart, closestPartDistance = nil, math.huge

                local part = v.Character:FindFirstChild(partName)
                if part then
                    local partPos = Camera:WorldToScreenPoint(part.Position)
                    local distance = (Vector2.new(partPos.X, partPos.Y) - mousePos).Magnitude
                    if distance < closestPartDistance and distance < Atlas['Silent Aim'].FOV.Radius and WallChecks(part.Position, {Client, v.Character}) then
                        closestPartDistance = distance
                        closestPart = part
                    end
                end

            if closestPart and closestPartDistance < closestDist then
                closestDist = closestPartDistance
                target = {Player = v, Part = closestPart}
            end
        end
    end
    return target
end

RunService.RenderStepped:Connect(function()
    if CameraTarget and CameraTarget.Character then
        if Atlas.Aimbot['Use Airshot']['Enabled']  then
            AirCheckType = CameraTarget.Character.Humanoid.FloorMaterial == Enum.Material.Air
        else
            AirCheckType = CameraTarget.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall
        end
        if Atlas.Aimbot.Enabled and Atlas.Aimbot['Use Airshot']['Enabled'] and AirCheckType then
            Atlas.Aimbot.AimPart = Atlas.Aimbot['Use Airshot']['AirPart']
        else
            Atlas.Aimbot.AimPart = Atlas.Aimbot.NewPart
        end
    end
end)

WTS = (function(Object)
	local ObjectVector = Camera:WorldToScreenPoint(Object.Position)
	return Vector2.new(ObjectVector.X, ObjectVector.Y)
end)

Filter = (function(obj)
	if (obj:IsA('BasePart')) then
		return true
	end
end)

mousePosVector2 = (function()
	return Vector2.new(Mouse.X, Mouse.Y) 
end)

spawn(function()
    while wait() do
        if Atlas['Silent Aim']['Enabled'] then
            Prey = getClosestChar()
        end
    end
end)

spawn(function()
	while wait() do
		if Prey and Prey.Character.Humanoid.FloorMaterial ~= Enum.Material.Air then
			local Ping = math.floor(game.Stats.Network.ServerStatsItem['Data Ping']:GetValue())
			Atlas['Silent Aim']['Prediction'] = Ping / 1000 + 0.07
		end
	end
end)

RunService.RenderStepped:Connect(function()
    if Prey and Prey.Character then
        if Atlas['Silent Aim']['Use Airshot']['Enabled'] then
            AirCheckType = Prey.Character.Humanoid.FloorMaterial == Enum.Material.Air
        else
            AirCheckType = Prey.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall
        end
        if Atlas['Silent Aim'].Enabled and Atlas['Silent Aim']['Use Airshot']['Enabled'] and AirCheckType then
            Atlas['Silent Aim'].AimPart = Atlas['Silent Aim']['Use Airshot']['AirPart']
        else
            Atlas['Silent Aim'].AimPart =  Atlas['Silent Aim'].AimPart
        end
     end
end)

local function getRemote()
    local gameinfo = Games[game.PlaceId]
    return replicatedstorage:FindFirstChild(gameinfo.Remote)
end

local function getArg()
    local gameinfo = Games[game.PlaceId]
    return gameinfo.Arg
end

local function silentaim(tool)  
    if tool:IsA("Tool") then  
        tool.Activated:Connect(function()
            if Atlas['Silent Aim'].Enabled and Prey then  
                SilentPos = Prey.Character[Atlas['Silent Aim'].AimPart].Position
                SilentPredictionPos = (Prey.Character[Atlas['Silent Aim'].AimPart].Velocity) * Atlas['Silent Aim'].Prediction
                local Arguments = {getArg(), SilentPos + SilentPredictionPos}  
                getRemote():FireServer(unpack(Arguments)) 
            end  
        end)  
    end  
end  

local function targetaimbot(tool)  
    if tool:IsA("Tool") then  
        tool.Activated:Connect(function()
            if Atlas['Target Aimbot'].Enabled and TargetPlayer then  
                TargetPos = TargetPlayer.Character[Atlas['Target Aimbot'].AimPart].Position
                TargetPredictionPos = (TargetPlayer.Character[Atlas['Target Aimbot'].AimPart].Velocity) * Atlas['Target Aimbot'].Prediction
                local Arguments = {getArg(), TargetPos + TargetPredictionPos}  
                getRemote():FireServer(unpack(Arguments))  
            end  
        end)  
    end  
end 


if getgenv().usehookfunctions then
    local mt = getrawmetatable(game)
    local old = mt.__namecall
    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(...)
        local args = {...}
        if TargetL and Atlas['Target Aimbot'].Enabled and TargetPlayer and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" or "UpdateMousePosI2" then
            args[3] = TargetPlayer.Character[Atlas['Target Aimbot'].AimPart].Position+(TargetPlayer.Character[Atlas['Target Aimbot'].AimPart].Velocity* Atlas['Target Aimbot'].Prediction)
            return old(unpack(args))
        end
        return old(...)
    end)
end

--local function cameraaimbot(tool)  
    --[[if tool:IsA("Tool") then  
        tool.Activated:Connect(function()
            if Atlas.Aimbot.Enabled and CameraTarget then  
                CamPos = CameraTarget.Character[Atlas.Aimbot.AimPart].Position
                CamPredPos = (CameraTarget.Character[Atlas.Aimbot.AimPart].Velocity) * Atlas.Aimbot.Prediction
                local Arguments = {getArg(), CamPos + CamPredPos}  
                getRemote():FireServer(unpack(Arguments))  
            end  
        end)  
    end--]]
--end  

Client.CharacterAdded:Connect(function(character)  
    character.ChildAdded:Connect(targetaimbot)
    --character.ChildAdded:Connect(cameraaimbot)    
    character.ChildAdded:Connect(silentaim)  
end)  

if Client.Character then  
    --Client.Character.ChildAdded:Connect(cameraaimbot) 
    Client.Character.ChildAdded:Connect(targetaimbot)   
    Client.Character.ChildAdded:Connect(silentaim)    
end 

RunService.RenderStepped:Connect(function()
    if CameraTarget and CameraTarget.Character then
        if Atlas.Aimbot.Enabled then
            local Position = CameraTarget.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and CameraTarget.Character[Atlas.Aimbot.AimPart].Position or CameraTarget.Character[Atlas.Aimbot.AimPart].Position
            local Main = CFrame.new(Camera.CFrame.p, Position + ((CameraTarget.Character:WaitForChild("HumanoidRootPart").Velocity) * Atlas.Aimbot.Prediction))
            Camera.CFrame = Camera.CFrame:Lerp(Main, Atlas.Aimbot.Smoothing, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
        end
    end
    if MouseTarget and MouseTarget.Character then
        if Atlas['Mouse Assist'].Enabled then
            local A = Camera:WorldToScreenPoint(MouseTarget.Character[Atlas['Mouse Assist'].AimPart].Position + MouseTarget.Character[Atlas['Mouse Assist'].AimPart].Velocity / Atlas['Mouse Assist'].Prediction)
            Position = mousemoverel((A.X - Mouse.X) / Atlas['Mouse Assist'].Smoothing,(A.Y - Mouse.Y) / Atlas['Mouse Assist'].Smoothing)
        end 
    end
end)

RunService.Stepped:Connect(function()
    if CameraTarget and CameraTarget.Character then
        if Atlas.Aimbot.Enabled and Atlas.Aimbot['Auto Flick'].Enabled then
            if CameraTarget.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                Atlas.Aimbot.AimPart = Atlas.Aimbot['Auto Flick']['Flick To']
            elseif CameraTarget.Character.Humanoid:GetState() == Enum.HumanoidStateType.Running then 
                Atlas.Aimbot.AimPart = Atlas.Aimbot.NewPart
            end
        end
    end
end)

RunService.Stepped:Connect(function()
    if MouseTarget and MouseTarget.Character then
        if Atlas['Mouse Assist'].Enabled and Atlas['Mouse Assist']['Auto Flick'].Enabled then
            if MouseTarget.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                Atlas['Mouse Assist'].AimPart = Atlas['Mouse Assist']['Auto Flick']['Flick To']
            elseif MouseTarget.Character.Humanoid:GetState() == Enum.HumanoidStateType.Running then 
                Atlas['Mouse Assist'].AimPart = Atlas['Mouse Assist'].NewPart
            end
        end
    end
end)

RunService.Stepped:Connect(function()
    if TargetPlayer and TargetPlayer.Character then
        if Atlas['Target Aimbot'].Enabled and Atlas['Target Aimbot']['Auto Flick'].Enabled then
            if TargetPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                Atlas['Target Aimbot'].AimPart = Atlas['Target Aimbot']['Auto Flick']['Flick To']
            elseif TargetPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Running then 
                Atlas['Target Aimbot'].AimPart = Atlas['Target Aimbot'].NewPart
            end
        end
    end
end)

RunService.RenderStepped:Connect(function()
    if getgenv().UnlockOnSelfDeath == true and Client.Character and Client.Character:FindFirstChild("Humanoid") and Client.Character:WaitForChild("BodyEffects")['K.O'].Value then
        if Locking == true then
            CameraTarget = nil
            Locking = false
            return
        end
    end  
    if getgenv().UnlockOnSelfDeath == true and Client.Character and Client.Character:FindFirstChild("Humanoid") and Client.Character:WaitForChild("BodyEffects")['K.O'].Value then
        if TargetL == true then
            TargetPlayer = nil
            TargetL = false
            return
        end
    end  
    if getgenv().KOCheck and TargetPlayer and TargetPlayer.Character:FindFirstChild("Humanoid") then
        if TargetPlayer.Character:WaitForChild("BodyEffects")['K.O'].Value then
            if TargetL == true then
                TargetPlayer = nil
                TargetL = false
                Camera.CameraSubject = Client.Character
                return
            end
        end
    end
    if getgenv().FFCheck == true and TargetPlayer and TargetPlayer.Character:FindFirstChildOfClass("ForceField") then
        if TargetL == true then
            TargetPlayer = nil
            TargetL = false
            return
        end
    end
    if getgenv().KOCheck and CameraTarget and CameraTarget.Character:FindFirstChild("Humanoid") then
        if CameraTarget.Character:WaitForChild("BodyEffects")['K.O'].Value then
            if Locking == true then
                CameraTarget = nil
                Locking = false
                return
            end
        end
    end 
end)

SigmaAtlas = function()
    if TargetPlayer and TargetPlayer.Character then
        local aimPart = TargetPlayer.Character[Atlas['Target Aimbot'].AimPart]
        if aimPart then
            return aimPart.Position + aimPart.Velocity * Atlas['Target Aimbot'].Prediction
        end
    end
    return nil
end

RunService.heartbeat:Connect(function()
    local targetEnabled = Atlas['Target Aimbot'].Enabled
    local tracerVisible = Atlas['Target Aimbot'].Tracer.Visible or getgenv().enabletracer
    if targetEnabled and TargetPlayer and tracerVisible then
        local sigmalol = SigmaAtlas()
        if sigmalol then
            local pos, onScreen = Camera:WorldToViewportPoint(sigmalol)
            if onScreen then
                TargetLine.Visible = true
                TargetLine.From = Vector2.new(Mouse.X, Mouse.Y + 36)
                TargetLine.To = Vector2.new(pos.X, pos.Y)
            else
                TargetLine.Visible = false
            end
        else
            TargetLine.Visible = false
        end
    else
        TargetLine.Visible = false
    end
end)

for i,v in pairs(VisualizeCFrame:GetChildren()) do 
	if v:IsA("BasePart") then 
		v.CanCollide = false 
		v.Material = Enum.Material.Plastic 
		v.Transparency = 0
	end 
end 

function RandomNumberRange(a)
    return math.random(-a * 100, a * 100) / 100
end

function RandomVectorRange(a, b, c)
    return Vector3.new(RandomNumberRange(a), RandomNumberRange(b), RandomNumberRange(c))
end

RunService.heartbeat:Connect(function()
    if getgenv().csyncenabled then
        bruhhxd = Client.Character:WaitForChild("HumanoidRootPart").CFrame
        local imposterdummybruhh = Client.Character:WaitForChild("HumanoidRootPart").CFrame
        if getgenv().csynctype == "Random" then
            imposterdummybruhh = imposterdummybruhh * CFrame.new(math.random(-getgenv().csyncrandomdistance, getgenv().csyncrandomdistance),math.random(-getgenv().csyncrandomdistance, getgenv().csyncrandomdistance),math.random(-getgenv().csyncrandomdistance, getgenv().csyncrandomdistance))
            imposterdummybruhh = imposterdummybruhh *CFrame.Angles(math.rad(RandomNumberRange(180)),math.rad(RandomNumberRange(180)),math.rad(RandomNumberRange(180)))
        elseif getgenv().csynctype == "Under Ground (On Target)" and TargetPlayer then
            imposterdummybruhh = TargetPlayer.Character:WaitForChild("HumanoidRootPart").CFrame
            imposterdummybruhh = imposterdummybruhh * CFrame.Angles(0, 0, 0) * CFrame.new(0, -5.4, 0)
        elseif getgenv().csynctype == "FuckThisShitUp" then
            imposterdummybruhh = Client.Character:WaitForChild("HumanoidRootPart").CFrame
            imposterdummybruhh = imposterdummybruhh * CFrame.Angles(0, 0, 0) * CFrame.new(0, -12345678910, 0)
        elseif getgenv().csynctype == "Random (On Target)" and TargetPlayer then
            imposterdummybruhh = TargetPlayer.Character.Head.CFrame
            imposterdummybruhh = imposterdummybruhh * CFrame.Angles(math.rad(RandomNumberRange(180)),math.rad(RandomNumberRange(180)),math.rad(RandomNumberRange(180))) * CFrame.new(math.random(-getgenv().csyncrandomdistance, getgenv().csyncrandomdistance),math.random(-getgenv().csyncrandomdistance, getgenv().csyncrandomdistance),math.random(-getgenv().csyncrandomdistance, getgenv().csyncrandomdistance))
        end
        if getgenv().visualizedummy then
            VisualizeCFrame.Parent = workspace
            VisualizeCFrame:WaitForChild("HumanoidRootPart").Velocity = Vector3.new()
            VisualizeCFrame:SetPrimaryPartCFrame(imposterdummybruhh)
        else
            VisualizeCFrame.Parent = nil
        end
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = imposterdummybruhh
        RunService.RenderStepped:Wait()
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = bruhhxd
    else  
        VisualizeCFrame.Parent = nil
    end
end)

local hitSounds = {
    Bameware = "rbxassetid://3124331820",
    Bell = "rbxassetid://6534947240",
    Bubble = "rbxassetid://6534947588",
    Pick = "rbxassetid://1347140027",
    Pop = "rbxassetid://198598793",
    Rust = "rbxassetid://1255040462",
    Sans = "rbxassetid://3188795283",
    Fart = "rbxassetid://130833677",
    Big = "rbxassetid://5332005053",
    Vine = "rbxassetid://5332680810",
    Bruh = "rbxassetid://4578740568",
    Skeet = "rbxassetid://5633695679",
    Neverlose = "rbxassetid://6534948092",
    Fatality = "rbxassetid://6534947869",
    Bonk = "rbxassetid://5766898159",
    Minecraft = "rbxassetid://4018616850",
 }
 
function setuphitmarker(plr) 
    plr.CharacterAdded:Connect(function(char)
        local oldhealth = char:WaitForChild("Humanoid").Health
        local connection
        connection = char.Humanoid.HealthChanged:Connect(function(health)
            if health < oldhealth then 
                if plr == TargetPlayer then 
                    if Atlas.Misc.Hit['Hit Sounds'] and Atlas.Misc.Hit.Enabled then 
                        local Sound = Instance.new('Sound', Camera)
                        local SoundName = Atlas.Misc.Hit.Sound
                        Sound.SoundId = hitSounds[SoundName]
                        Sound.Volume = Atlas.Misc.Hit.Volume
                        Sound:Play()
                        delay(10,function()
                            Sound:Destroy()
                        end)
                    end
                    if Atlas.Misc.Hit.Logs then 
                      if math.floor(health) > 0 then
                        Notifications:Notification(tostring(math.floor(oldhealth) - math.floor(health)).." damange on: "..char.Humanoid.DisplayName)
                      else 
                        Notifications:Notification("Knocked: " ..char.Humanoid.DisplayName, 3, false)
                        end
                    end
                end
            end
            oldhealth = healthF
            if health == 0 then 
                connection:Disconnect()
            end
        end)
    end)
end
 
for i,v in pairs(Players:GetChildren()) do 
    setuphitmarker(v)
end
 
 for i,plr in pairs(Players:GetChildren()) do 
    local char = plr.Character
    local oldhealth = char:WaitForChild("Humanoid").Health
    local connection
    connection = char.Humanoid.HealthChanged:Connect(function(health)
        if health < oldhealth then 
            if plr == TargetPlayer then 
                if Atlas.Misc.Hit['Hit Sounds'] and Atlas.Misc.Hit.Enabled then 
                    local Sound = Instance.new('Sound', Camera)
                    local SoundName = Atlas.Misc.Hit.Sound
                    Sound.SoundId = hitSounds[SoundName]
                    Sound.Volume = Atlas.Misc.Hit.Volume
                    Sound:Play()
                    delay(10,function()
                        Sound:Destroy()
                    end)
                end
                if Atlas.Misc.Hit.Logs then 
                   if math.floor(health) > 0 then
                    Notifications:Notification(tostring(math.floor(oldhealth) - math.floor(health)).." damange on: "..char.Humanoid.DisplayName, 3, false)
                   else 
                    Notifications:Notification("Knocked: " ..char.Humanoid.DisplayName, 3, false)
                   end
                end
            end
        end
        oldhealth = health
        if health == 0 then 
            connection:Disconnect()
        end
    end)
end
 
Players.PlayerAdded:Connect(function(plr)
    setuphitmarker(plr)
end)


get = function(gettype)
    if Atlas.Global['Auto Prediction'] and Atlas.Global['Enabled'] then
        local PingStats = game:GetService("Stats").Network.ServerStatsItem['Data Ping']:GetValueString()
        local Value = tostring(PingStats)
        local PingValue = Value:split(" ")
        local PingNumber = tonumber(PingValue[1])
        if Atlas.Global.Mode == "Normal" then 
            return 0.1 + PingNumber / 2000 + (PingNumber / 1000) * (PingNumber / 1500) * 0.00451
        elseif Atlas.Global.Mode == "High Ping" then 
            return 0.1 + PingNumber / 200 + (PingNumber / 1000) * (PingNumber / 1500) * 1
        end 
    end
end

RunService.Heartbeat:Connect(function()
    if getgenv().PREDPRESETSTAR == "0.113" then 
        Atlas['Target Aimbot'].Prediction = 0.113
    elseif getgenv().PREDPRESETSTAR == "0.115" then
        Atlas['Target Aimbot'].Prediction = 0.115
    elseif getgenv().PREDPRESETSTAR == "0.117" then
        Atlas['Target Aimbot'].Prediction = 0.117
    elseif getgenv().PREDPRESETSTAR == "0.11923283912031938191231281632312637123821763333312731833" then
        Atlas['Target Aimbot'].Prediction = 0.11923283912031938191231281632312637123821763333312731833
    elseif getgenv().PREDPRESETSTAR == "0.121316378910319876472890149871624" then
        Atlas['Target Aimbot'].Prediction = 0.121316378910319876472890149871624
    elseif getgenv().PREDPRESETSTAR == "0.12338" then
        Atlas['Target Aimbot'].Prediction = 0.12338
    end
end)

RunService.RenderStepped:Connect(function()
    if Atlas.Global['Auto Prediction'] and Atlas.Global['Enabled'] then
        Atlas['Target Aimbot'].Prediction = get("prediction")
    end
end)
RunService.RenderStepped:Connect(function()
    if Atlas.Global['Auto Prediction'] and Atlas.Global['Enabled'] then 
        Atlas['Silent Aim'].Prediction = get("prediction")
    end
end)
RunService.RenderStepped:Connect(function()
    if Atlas.Global['Auto Prediction'] and Atlas.Global['Enabled'] then 
        Atlas['Aimbot'].Prediction = get("prediction")
    end
end)

tp = function(v) 
    if v == "Uphill" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(482, 48, -602)
    elseif v == "Military" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(58.71923828125, 25.25499725341797, -869.0357055664062) 
    elseif v == "Park" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-268, 22, -754) 
    elseif v == "Downhill" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-565, 8, -737) 
    elseif v == "Double Barrel" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-1042, 22, -261) 
    elseif v == "Casino" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-864, 22, -143) 
    elseif v == "Trailer" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-963, -1, 469) 
    elseif v == "School" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-653, 22, 257) 
    elseif v == "Revolver" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-642, 22, -124) 
    elseif v == "Bank" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-446, 39, -286) 
    elseif v == "Sewer" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(112, -27, -277) 
    elseif v == "Fire Station" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-150, 54, -94) 
    elseif v == "Hood Fitness" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-76, 23, -638) 
    elseif v == "Hood Kicks"  then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-188, 22, -410) 
    elseif v == "Jail" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-299, 22, -91) 
    elseif v == "Church" then 
        Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(205, 22, -80) 
    end
end
 
RunService.RenderStepped:Connect(function()
    if Atlas.Aimbot.Enabled and CameraTarget and CameraTarget.Character then        
        if Atlas.Aimbot.Shake.Enabled then
            local Main = CFrame.new(Camera.CFrame.p,CameraTarget.Character[Atlas.Aimbot.AimPart].Position + CameraTarget.Character[Atlas.Aimbot.AimPart].Velocity*Atlas.Aimbot.Prediction +
            Vector3.new(math.random(-Atlas.Aimbot.Shake.X,Atlas.Aimbot.Shake.X),math.random(-Atlas.Aimbot.Shake.Y,Atlas.Aimbot.Shake.Y),math.random(-Atlas.Aimbot.Shake.Z,Atlas.Aimbot.Shake.Z))*1)
            Camera.CFrame = Camera.CFrame:Lerp(Main,Atlas.Aimbot.Smoothing,Enum.EasingStyle.Sine,Enum.EasingDirection.InOut,Enum.EasingStyle.Bounce,Enum.EasingDirection.Out,Enum.EasingStyle.Exponential,Enum.EasingDirection.Out)
        else
            local Main = CFrame.new(Camera.CFrame.p,CameraTarget.Character[Atlas.Aimbot.AimPart].Position + CameraTarget.Character[Atlas.Aimbot.AimPart].Velocity*Atlas.Aimbot.Prediction)
        end
    end
end)

Client:GetMouse().KeyDown:Connect(function(Key)
    if Key == (string.lower(Atlas.Macro.Keybind)) and Atlas.Macro['Macro Type'] == "IO" then
        if Atlas.Macro.Enabled then
            speeding = not speeding
            if speeding == true then
                repeat task.wait(Atlas.Macro.Delay / 1)
                VIMP:SendKeyEvent(true, "I", false, game)
                task.wait(Atlas.Macro.Delay / 1)
                VIMP:SendKeyEvent(true, "O", false, game)
                task.wait(Atlas.Macro.Delay / 1)
                VIMP:SendKeyEvent(true, "I", false, game)
                task.wait(Atlas.Macro.Delay / 1)
                VIMP:SendKeyEvent(true, "O", false, game)
                task.wait(Atlas.Macro.Delay / 1)
                until speeding == false
            end
        end
    end
end)

Client:GetMouse().KeyDown:Connect(function(Key)
    if Key == (string.lower(Atlas.Macro.Keybind)) and Atlas.Macro['Macro Type'] == "Mouse" then
        if Atlas.Macro.Enabled then
            speeding = not speeding
            if speeding == true then
                repeat task.wait(Atlas.Macro.Delay / 1)
                    VIMP:SendMouseWheelEvent("0", "0", true, game)
                    task.wait(Atlas.Macro.Delay / 1)
                    VIMP:SendMouseWheelEvent("0", "0", false, game)
                    task.wait(Atlas.Macro.Delay / 1)
                    VIMP:SendMouseWheelEvent("0", "0", true, game)
                    task.wait(Atlas.Macro.Delay / 1)
                    VIMP:SendMouseWheelEvent("0", "0", false, game)
                    task.wait(Atlas.Macro.Delay / 1)
                until speeding == false
            end
        end
    end
end)

-- // Target UI not made by me ):

local MainGui = Instance.new("ScreenGui")
MainGui.Name = "TargetUI"
MainGui.Parent = game.CoreGui
MainGui.DisplayOrder = 998

local TargetUI = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local Container_2 = Instance.new("Frame")
local Line_2 = Instance.new("Frame")
local Profile = Instance.new("ImageButton")
local HealthBorder = Instance.new("Frame")
local HealthBar = Instance.new("Frame")
local UICorner_2 = Instance.new("UICorner")
local HealthText = Instance.new("TextLabel")
local HealthIcon = Instance.new("ImageButton")
local Title_2 = Instance.new("TextLabel")
local ArmorBorder = Instance.new("Frame")
local ArmorBar = Instance.new("Frame")
local UICorner_3 = Instance.new("UICorner")
local ArmorText = Instance.new("TextLabel")
local ArmorIcon = Instance.new("ImageButton")
local UmbraShadow_2 = Instance.new("ImageLabel")
local AmbientShadow_2 = Instance.new("ImageLabel")

TargetUI.Name = "Target UI"
TargetUI.Parent = MainGui
TargetUI.AnchorPoint = Vector2.new(0.5, 0.5)
TargetUI.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
TargetUI.BackgroundTransparency = 0.700
TargetUI.BorderSizePixel = 0
TargetUI.Position = UDim2.new(0.504575729, 0, 0.787337661, 0)
TargetUI.Size = UDim2.new(0, 251, 0, 97)
TargetUI.Visible = false

UICorner.CornerRadius = UDim.new(0, 4)
UICorner.Parent = TargetUI

Container_2.Name = "Container"
Container_2.Parent = TargetUI
Container_2.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
Container_2.BackgroundTransparency = 0.700
Container_2.BorderSizePixel = 0
Container_2.Position = UDim2.new(0.00973401312, 0, 0.027855942, 0)
Container_2.Size = UDim2.new(0, 248, 0, 94)

Line_2.Name = "Line"
Line_2.Parent = Container_2
Line_2.BackgroundColor3 = Color3.fromRGB(0, 208, 255)
Line_2.BorderSizePixel = 0
Line_2.Position = UDim2.new(-0.00261220615, 0, -0.00655640941, 0)
Line_2.Size = UDim2.new(0, 249, 0, 3)

Profile.Name = "Profile"
Profile.Parent = Container_2
Profile.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Profile.BackgroundTransparency = 1.000
Profile.Position = UDim2.new(-0.00427350448, 0, 0.0338983051, 0)
Profile.Size = UDim2.new(0, 90, 0, 90)
Profile.AutoButtonColor = false
Profile.Image = "rbxthumb://type=AvatarHeadShot&id=590180069&w=420&h=420"

HealthBorder.Name = "HealthBorder"
HealthBorder.Parent = Container_2
HealthBorder.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
HealthBorder.BackgroundTransparency = 0.500
HealthBorder.BorderSizePixel = 0
HealthBorder.Position = UDim2.new(0.400000006, 0, 0.349999994, 0)
HealthBorder.Size = UDim2.new(0, 135, 0, 22)

HealthBar.Name = "HealthBar"
HealthBar.Parent = HealthBorder
HealthBar.Active = true
HealthBar.BackgroundColor3 = Color3.fromRGB(0, 208, 255)
HealthBar.BorderSizePixel = 0
HealthBar.ClipsDescendants = true
HealthBar.Position = UDim2.new(0.0220597833, 0, -0.0436026901, 0)
HealthBar.Size = UDim2.new(1, 0, 1, 0)

UICorner_2.CornerRadius = UDim.new(0, 3)
UICorner_2.Parent = HealthBar

HealthText.Name = "HealthText"
HealthText.Parent = HealthBorder
HealthText.BackgroundColor3 = Color3.fromRGB(118, 118, 118)
HealthText.BackgroundTransparency = 1.000
HealthText.Size = UDim2.new(0, 138, 0, 22)
HealthText.Font = Enum.Font.Ubuntu
HealthText.Text = "100"
HealthText.TextColor3 = Color3.fromRGB(255, 255, 255)
HealthText.TextSize = 20.000

HealthIcon.Name = "HealthIcon"
HealthIcon.Parent = HealthBorder
HealthIcon.BackgroundTransparency = 1.000
HealthIcon.Position = UDim2.new(0.0900000036, 0, 0.119999997, 0)
HealthIcon.Size = UDim2.new(0, 15, 0, 15)
HealthIcon.ZIndex = 2
HealthIcon.Image = "rbxassetid://7208275588"
HealthIcon.ImageRectOffset = Vector2.new(964, 444)
HealthIcon.ImageRectSize = Vector2.new(36, 36)

Title_2.Name = "Title"
Title_2.Parent = Container_2
Title_2.BackgroundColor3 = Color3.fromRGB(118, 118, 118)
Title_2.BackgroundTransparency = 1.000
Title_2.Position = UDim2.new(0.426879644, 0, 0.0496608652, 0)
Title_2.Size = UDim2.new(0, 132, 0, 25)
Title_2.Font = Enum.Font.Ubuntu
Title_2.Text = "Atlas105 (@unlimxts)"
Title_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Title_2.TextScaled = true
Title_2.TextSize = 20.000
Title_2.TextWrapped = true
Title_2.TextXAlignment = Enum.TextXAlignment.Left

ArmorBorder.Name = "ArmorBorder"
ArmorBorder.Parent = Container_2
ArmorBorder.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
ArmorBorder.BackgroundTransparency = 0.500
ArmorBorder.BorderSizePixel = 0
ArmorBorder.Position = UDim2.new(0.400000006, 0, 0.649999976, 0)
ArmorBorder.Size = UDim2.new(0, 135, 0, 22)

ArmorBar.Name = "ArmorBar"
ArmorBar.Parent = ArmorBorder
ArmorBar.BackgroundColor3 = Color3.fromRGB(0, 208, 255)
ArmorBar.BorderSizePixel = 0
ArmorBar.Position = UDim2.new(0.0220597833, 0, -0.0436026901, 0)
ArmorBar.Size = UDim2.new(1, 0, 1, 0)

UICorner_3.CornerRadius = UDim.new(0, 3)
UICorner_3.Parent = ArmorBar

ArmorText.Name = "ArmorText"
ArmorText.Parent = ArmorBorder
ArmorText.BackgroundColor3 = Color3.fromRGB(118, 118, 118)
ArmorText.BackgroundTransparency = 1.000
ArmorText.Size = UDim2.new(0, 138, 0, 21)
ArmorText.Font = Enum.Font.Ubuntu
ArmorText.Text = "100"
ArmorText.TextColor3 = Color3.fromRGB(255, 255, 255)
ArmorText.TextSize = 20.000

ArmorIcon.Name = "ArmorIcon"
ArmorIcon.Parent = ArmorBorder
ArmorIcon.BackgroundTransparency = 1.000
ArmorIcon.Position = UDim2.new(0.0900000036, 0, 0.119999997, 0)
ArmorIcon.Size = UDim2.new(0, 15, 0, 15)
ArmorIcon.ZIndex = 2
ArmorIcon.Image = "rbxassetid://3926307971"
ArmorIcon.ImageRectOffset = Vector2.new(164, 284)
ArmorIcon.ImageRectSize = Vector2.new(36, 36)

UmbraShadow_2.Name = "UmbraShadow"
UmbraShadow_2.Parent = TargetUI
UmbraShadow_2.AnchorPoint = Vector2.new(0.5, 0.5)
UmbraShadow_2.BackgroundTransparency = 1.000
UmbraShadow_2.BorderSizePixel = 0
UmbraShadow_2.Position = UDim2.new(0.5, 0, 0.5, 6)
UmbraShadow_2.Size = UDim2.new(1, 10, 1, 10)
UmbraShadow_2.ZIndex = 0
UmbraShadow_2.Image = "rbxassetid://1316045217"
UmbraShadow_2.ImageColor3 = Color3.fromRGB(0, 0, 0)
UmbraShadow_2.ImageTransparency = 0.850
UmbraShadow_2.ScaleType = Enum.ScaleType.Slice
UmbraShadow_2.SliceCenter = Rect.new(10, 10, 118, 118)

AmbientShadow_2.Name = "AmbientShadow"
AmbientShadow_2.Parent = TargetUI
AmbientShadow_2.AnchorPoint = Vector2.new(0.5, 0.5)
AmbientShadow_2.BackgroundTransparency = 1.000
AmbientShadow_2.BorderSizePixel = 0
AmbientShadow_2.Position = UDim2.new(0.5, 0, 0.476000011, 3)
AmbientShadow_2.Size = UDim2.new(1, 5, 1, 5)
AmbientShadow_2.ZIndex = 0
AmbientShadow_2.Image = "rbxassetid://1316045217"
AmbientShadow_2.ImageColor3 = Color3.fromRGB(0, 0, 0)
AmbientShadow_2.ImageTransparency = 0.500
AmbientShadow_2.ScaleType = Enum.ScaleType.Slice
AmbientShadow_2.SliceCenter = Rect.new(10, 10, 118, 118)
TargetUI.Visible = false

--[[local TargetGui = Instance.new("ScreenGui")
local BorderFrame = Instance.new("Frame")
local Frame2Test = Instance.new("Frame")
local Frame3Test = Instance.new("Frame")
local TargetUiLabel = Instance.new("TextLabel")
local Frame4Test = Instance.new("Frame")
local Frame5Test = Instance.new("Frame")
local MugShot = Instance.new("ImageLabel")
local Separator = Instance.new("Frame")
local TargetName = Instance.new("TextLabel")
local TargetHealth = Instance.new("TextLabel")
local TargetArmor = Instance.new("TextLabel")
local healthbar = Instance.new("Frame")
local armorbar2 = Instance.new("Frame")
local healthbar2 = Instance.new("Frame")
local armorbar = Instance.new("Frame")


TargetGui.Name = "TargetGui"
TargetGui.Parent = game.CoreGui
BorderFrame.Name = "BorderFrame"
BorderFrame.Parent = TargetGui
BorderFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
BorderFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
BorderFrame.Position = UDim2.new(0, 355, 0, 355)
BorderFrame.Size = UDim2.new(0, 300, 0, 100)

Frame2Test.Name = "Frame2Test"
Frame2Test.Parent = TargetGui
Frame2Test.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
Frame2Test.BorderColor3 = Color3.fromRGB(171, 55, 186)
Frame2Test.Position = UDim2.new(0, 356, 0, 356)
Frame2Test.Size = UDim2.new(0, 298, 0, 98)
Frame2Test.ZIndex = 2

Frame3Test.Name = "Frame3Test"
Frame3Test.Parent = TargetGui
Frame3Test.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
Frame3Test.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame3Test.Position = UDim2.new(0, 357, 0, 357)
Frame3Test.Size = UDim2.new(0, 296, 0, 96)
Frame3Test.ZIndex = 3

TargetUiLabel.Name = "TargetUiLabel"
TargetUiLabel.Parent = Frame3Test
TargetUiLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TargetUiLabel.BackgroundTransparency = 1.000
TargetUiLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TargetUiLabel.BorderSizePixel = 0
TargetUiLabel.Size = UDim2.new(0, 60, 0, 20)
TargetUiLabel.ZIndex = 3
TargetUiLabel.Font = Enum.Font.SourceSans
TargetUiLabel.Text = "Target UI"
TargetUiLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetUiLabel.TextSize = 14.000
TargetUiLabel.TextStrokeTransparency = 0.350

Frame4Test.Name = "Frame4Test"
Frame4Test.Parent = TargetGui
Frame4Test.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
Frame4Test.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame4Test.Position = UDim2.new(0, 363, 0, 377)
Frame4Test.Size = UDim2.new(0, 284, 0, 73)
Frame4Test.ZIndex = 4

Frame5Test.Name = "Frame5Test"
Frame5Test.Parent = TargetGui
Frame5Test.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
Frame5Test.BorderColor3 = Color3.fromRGB(118, 118, 118)
Frame5Test.Position = UDim2.new(0, 364, 0, 378)
Frame5Test.Size = UDim2.new(0, 282, 0, 71)
Frame5Test.ZIndex = 5

MugShot.Name = "MugShot"
MugShot.Parent = Frame5Test
MugShot.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MugShot.BorderColor3 = Color3.fromRGB(0, 0, 0)
MugShot.BorderSizePixel = 0
MugShot.Position = UDim2.new(0.0248226952, 0, 0.0422535203, 0)
MugShot.Size = UDim2.new(0, 77, 0, 64)
MugShot.ZIndex = 5
MugShot.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"

Separator.Name = "Separator"
Separator.Parent = Frame5Test
Separator.BackgroundColor3 = Color3.fromRGB(102, 102, 102)
Separator.BorderColor3 = Color3.fromRGB(57, 57, 57)
Separator.Position = UDim2.new(0.322695047, 0, 0.211267605, 0)
Separator.Size = UDim2.new(0, 183, 0, 1)
Separator.ZIndex = 5

TargetName.Name = "TargetName"
TargetName.Parent = Frame5Test
TargetName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TargetName.BackgroundTransparency = 1.000
TargetName.BorderColor3 = Color3.fromRGB(0, 0, 0)
TargetName.BorderSizePixel = 0
TargetName.Position = UDim2.new(0.322695047, 0, 0, 0)
TargetName.Size = UDim2.new(0, 183, 0, 15)
TargetName.ZIndex = 5
TargetName.Font = Enum.Font.SourceSans
TargetName.Text = "target"
TargetName.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetName.TextSize = 14.000
TargetName.TextStrokeTransparency = 0.350
TargetName.TextXAlignment = Enum.TextXAlignment.Left

TargetHealth.Name = "TargetHealth"
TargetHealth.Parent = Frame5Test
TargetHealth.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TargetHealth.BackgroundTransparency = 1.000
TargetHealth.BorderColor3 = Color3.fromRGB(0, 0, 0)
TargetHealth.BorderSizePixel = 0
TargetHealth.Position = UDim2.new(0.322695047, 0, 0.239436626, 0)
TargetHealth.Size = UDim2.new(0, 183, 0, 15)
TargetHealth.ZIndex = 5
TargetHealth.Font = Enum.Font.SourceSans
TargetHealth.Text = "health"
TargetHealth.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetHealth.TextSize = 14.000
TargetHealth.TextStrokeTransparency = 0.350
TargetHealth.TextXAlignment = Enum.TextXAlignment.Left

TargetArmor.Name = "TargetArmor"
TargetArmor.Parent = Frame5Test
TargetArmor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TargetArmor.BackgroundTransparency = 1.000
TargetArmor.BorderColor3 = Color3.fromRGB(0, 0, 0)
TargetArmor.BorderSizePixel = 0
TargetArmor.Position = UDim2.new(0.322695047, 0, 0.577464759, 0)
TargetArmor.Size = UDim2.new(0, 183, 0, 15)
TargetArmor.ZIndex = 5
TargetArmor.Font = Enum.Font.SourceSans
TargetArmor.Text = "armor"
TargetArmor.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetArmor.TextSize = 14.000
TargetArmor.TextStrokeTransparency = 0.350
TargetArmor.TextXAlignment = Enum.TextXAlignment.Left

healthbar.Name = "healthbar"
healthbar.Parent = Frame5Test
healthbar.BackgroundColor3 = Color3.fromRGB(102, 102, 102)
healthbar.BorderColor3 = Color3.fromRGB(57, 57, 57)
healthbar.Position = UDim2.new(0.322695047, 0, 0.492957741, 0)
healthbar.Size = UDim2.new(0, 183, 0, 6)
healthbar.ZIndex = 5

armorbar2.Name = "armorbar2"
armorbar2.Parent = Frame5Test
armorbar2.BackgroundColor3 = Color3.fromRGB(98, 189, 222)
armorbar2.BorderColor3 = Color3.fromRGB(57, 57, 57)
armorbar2.Position = UDim2.new(0.322695047, 0, 0.788732409, 0)
armorbar2.Size = UDim2.new(0, 111, 0, 6)
armorbar2.ZIndex = 6

healthbar2.Name = "healthbar2"
healthbar2.Parent = Frame5Test
healthbar2.BackgroundColor3 = Color3.fromRGB(102, 26, 55)
healthbar2.BorderColor3 = Color3.fromRGB(57, 57, 57)
healthbar2.Position = UDim2.new(0.322695047, 0, 0.492957741, 0)
healthbar2.Size = UDim2.new(0, 111, 0, 6)
healthbar2.ZIndex = 6

armorbar.Name = "armorbar"
armorbar.Parent = Frame5Test
armorbar.BackgroundColor3 = Color3.fromRGB(102, 102, 102)
armorbar.BorderColor3 = Color3.fromRGB(57, 57, 57)
armorbar.Position = UDim2.new(0.322695047, 0, 0.788732409, 0)
armorbar.Size = UDim2.new(0, 183, 0, 6)
armorbar.ZIndex = 5
TargetGui.Enabled = false


local TweenService = game:GetService("TweenService")

local function updateTargetInfo(target)
    if TargetPlayer and TargetPlayer.Character then
        TargetGui.Enabled = true
        MugShot.Image = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. TargetPlayer.UserId .. "&width=420&height=420&format=png"
    
        local healthPercentage = TargetPlayer.Character.Humanoid.Health / 100
        local armorPercentage = TargetPlayer.Character:WaitForChild("BodyEffects").Armor.Value / 200
    
        local healthTween = TweenService:Create(healthbar2, TweenInfo.new(0.5, Enum.EasingStyle.Elastic), {Size = UDim2.new(healthPercentage, 0, 0, 5)})
        local armorTween = TweenService:Create(armorbar2, TweenInfo.new(0.5, Enum.EasingStyle.Elastic), {Size = UDim2.new(armorPercentage, 0, 0, 5)})

        healthTween:Play()
        armorTween:Play()
        TargetName.Text = TargetPlayer.Name
    else 
        TargetGui.Enabled = false
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    updateTargetInfo(target)
end)

while task.wait() do
    wait(0.6)
    TargetPlayer.Character:WaitForChild("BodyEffects").Armor.Value = math.random(2,150)
    TargetPlayer.Character.Humanoid.Health = math.random(2,100)
end--]]

RunService.heartbeat:Connect(function()
    Line_2.BackgroundColor3 = Atlas['Target Aimbot']['Target UI'].Color or getgenv().targetuicolor
    ArmorBar.BackgroundColor3 = Atlas['Target Aimbot']['Target UI'].Color or getgenv().targetuicolor
    HealthBar.BackgroundColor3 = Atlas['Target Aimbot']['Target UI'].Color or getgenv().targetuicolor
end)

local aimprediction = Drawing.new("Text")
aimprediction.Text = ""
aimprediction.Color = Color3.fromRGB(255, 255, 255)
aimprediction.Visible = false
aimprediction.Outline = true
aimprediction.Size = 16
aimprediction.Font = 3
aimprediction.Position = Vector2.new(20, 210)
aimprediction.ZIndex = 1500

local silentpred = Drawing.new("Text")
silentpred.Text = ""
silentpred.Color = Color3.fromRGB(255, 255, 255)
silentpred.Visible = false
silentpred.Outline = true
silentpred.Size = 16
silentpred.Font = 3
silentpred.Position = Vector2.new(20, 230)
silentpred.ZIndex = 1500

local ping = Drawing.new("Text")
ping.Text = ""
ping.Color = Color3.fromRGB(255, 255, 255)
ping.Visible = false
ping.Outline = true
ping.Size = 16
ping.Font = 3
ping.Position = Vector2.new(20, 250)
ping.ZIndex = 1500

local targetpred = Drawing.new("Text")
targetpred.Text = ""
targetpred.Color = Color3.fromRGB(255, 255, 255)
targetpred.Visible = false
targetpred.Outline = true
targetpred.Size = 16
targetpred.Font = 3
targetpred.Position = Vector2.new(20, 270)

local silentAimPart = Drawing.new("Text")
silentAimPart.Text = ""
silentAimPart.Color = Color3.fromRGB(255, 255, 255)
silentAimPart.Visible = false
silentAimPart.Outline = true
silentAimPart.Size = 16
silentAimPart.Font = 3
silentAimPart.Position = Vector2.new(20, 290)

local aimAimPart = Drawing.new("Text")
aimAimPart.Text = ""
aimAimPart.Color = Color3.fromRGB(255, 255, 255)
aimAimPart.Visible = false
aimAimPart.Outline = true
aimAimPart.Size = 16
aimAimPart.Font = 3
aimAimPart.Position = Vector2.new(20, 292)

local resolveron = Drawing.new("Text")
resolveron.Text = ""
resolveron.Color = Color3.fromRGB(255, 255, 255)
resolveron.Visible = false
resolveron.Outline = true
resolveron.Size = 16
resolveron.Font = 3
resolveron.Position = Vector2.new(20, 310)

local velocityshower = Drawing.new("Text")
velocityshower.Text = ""
velocityshower.Color = Color3.fromRGB(255, 255, 255)
velocityshower.Visible = false
velocityshower.Outline = true
velocityshower.Size = 16
velocityshower.Font = 3
velocityshower.Position = Vector2.new(20, 330)

Alive = function(TargetPlayer)
    if TargetPlayer and TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("HumanoidRootPart") ~= nil and TargetPlayer.Character:FindFirstChild("Humanoid") ~= nil and TargetPlayer.Character:FindFirstChild("Head") ~= nil then
        return true
    end
    return false
end 

Round = function(num, numDecimaClientlaces)
    return tonumber(string.format("%." .. (numDecimaClientlaces or 0) .. "f", num))
end
 

RunService.Heartbeat:Connect(function()
    if Atlas['Target Aimbot']['Target UI'].Enabled and TargetPlayer then
        if TargetPlayer == nil then
            Profile.Image = "rbxassetid://11394475200"
            ArmorText.Text = "Data Not Found!"
            HealthText.Text = "Data Not Found!"
        end
        if TargetPlayer then
            local NewHealth = TargetPlayer.Character.Humanoid.Health / TargetPlayer.Character.Humanoid.MaxHealth
            Profile.Image = "rbxthumb://type=AvatarHeadShot&id=" .. TargetPlayer.UserId .. "&w=420&h=420"
            Title_2.Text = TargetPlayer.Name .. " (" .. TargetPlayer.DisplayName .. ")"
            HealthText.Text = Round(NewHealth * 100, 2)
            HealthBar:TweenSize(UDim2.new(NewHealth, 0, 1, 0), "In", "Linear", 0.25)
            if TargetPlayer.Character:FindFirstChild("BodyEffects") and 
               TargetPlayer.Character.BodyEffects:FindFirstChild("Armor") then
                local NewArmor = TargetPlayer.Character.BodyEffects.Armor.Value / 200
                ArmorText.Text = Round(NewArmor * 100, 2)
                ArmorBar:TweenSize(UDim2.new(NewArmor, 0, 1, 0), "In", "Linear", 0.25)
            else
                ArmorText.Text = "Data Not Found!"
            end
            TargetUI.Visible = true
        end
    else
        TargetUI.Visible = false
    end
    if TargetPlayer == nil then
        Profile.Image = "rbxassetid://11394475200"
        ArmorText.Text = "error"
        HealthText.Text = "error"
    end
    task.wait(0.35)
end)

RunService.RenderStepped:Connect(function()
    if Atlas['Target Aimbot']['Target UI'].Position == "Default" then
        TargetUI.Position = UDim2.new(0.504575729, 0, 0.787337661, 0)
    elseif Atlas['Target Aimbot']['Target UI'].Position == "Cursor" then
        TargetUI.Position = UDim2.new(0, Mouse.X, 0, Mouse.Y + 35)
    elseif Atlas['Target Aimbot']['Target UI'].Position == "Follow Target" and TargetPlayer then
        local targetPos = Camera:WorldToViewportPoint(TargetPlayer.Character.Head.Position)
        TargetUI.Position = UDim2.new(0, targetPos.X, 0, targetPos.Y)
    end
end)
 
Client:GetMouse().KeyDown:Connect(function(keyPressed)
    if keyPressed == (Atlas.Binds.Resolving) then
        pcall(function()
            if Atlas.Networking.Resolver.Enabled == false then
                Atlas.Networking.Resolver.Enabled = true
                if Atlas.Networking.Resolver.Notify then
                    Notifications:Notification("Resolver: "..tostring(Atlas.Networking.Resolver.Enabled).."", 3, Library.Accent, false)
                end
            elseif Atlas.Networking.Resolver.Enabled == true then
                Atlas.Networking.Resolver.Enabled = false
                if Atlas.Networking.Resolver.Notify then
                    Notifications:Notification("Resolver: "..tostring(Atlas.Networking.Resolver.Enabled).."", 3, Library.Accent, false)
                end
            end
        end)
    end
end)

Client:GetMouse().KeyDown:Connect(function(keyPressed)
    if keyPressed == (Atlas['Target Aimbot']['Target Strafe']['C-Sync'].Keybind) then
        pcall(function()
            if getgenv().csyncenabled == false then
                getgenv().csyncenabled = true
                if Atlas['Target Aimbot']['Target Strafe']['C-Sync'].Notify then
                    Notifications:Notification("C-Sync: "..tostring(getgenv().csyncenabled).."", 3, Library.Accent, false)
                end
            elseif getgenv().csyncenabled == true then
                getgenv().csyncenabled = false
                if Atlas['Target Aimbot']['Target Strafe']['C-Sync'].Notify then
                    Notifications:Notification("C-Sync: "..tostring(getgenv().csyncenabled).."", 3, Library.Accent, false)
                end
            end
        end)
    end
end)

Client:GetMouse().KeyDown:Connect(function(keyPressed)
    if keyPressed == (Atlas.Misc['Anti Lock'].Keybind) then
        pcall(function()
            if Atlas.Misc['Anti Lock'].Enabled == false then
                Atlas.Misc['Anti Lock'].Enabled = true
                if Atlas.Misc['Anti Lock'].Notify then
                    Notifications:Notification("Velocity Spoofer: "..tostring(Atlas.Misc['Anti Lock'].Enabled).."", 3, Library.Accent, false)
                end
            elseif Atlas.Misc['Anti Lock'].Enabled == true then
                Atlas.Misc['Anti Lock'].Enabled = false
                if Atlas.Misc['Anti Lock'].Notify then
                    Notifications:Notification("Velocity Spoofer: "..tostring(Atlas.Misc['Anti Lock'].Enabled).."", 3, Library.Accent, false)
                end
            end
        end)
    end
end)

if UserInputService.TouchEnabled then
    if Atlas.Script['Show Client Stats'] then
        RunService.RenderStepped:Connect(function()
            l.Visible = true
            local fps = math.floor(1 / RunService.RenderStepped:Wait())
            local cpu = game:GetService("Stats"):GetTotalMemoryUsageMb()
            local ping = math.floor(game:GetService("Stats").Network.ServerStatsItem['Data Ping']:GetValue())
            l.Text = string.format("FPS %d GPU N/A CPU %d%% LAT %dms", fps, cpu, ping)
        end)
    end
end

local placemarker = Instance.new("Part", workspace)
function makemarker(Parent, Adornee, Color, Size, Size2)
    local e = Instance.new("BillboardGui", Parent)
    e.Name = "PP"
    e.Adornee = Adornee
    e.Size = UDim2.new(Size, Size2, Size, Size2)
    e.AlwaysOnTop = true
    local a = Instance.new("Frame", e)
    a.Size = UDim2.new(1, 1, 1, 1)
    a.Transparency = 0
    a.BackgroundTransparency = 0
    a.BackgroundColor3 = Color
    local g = Instance.new("UICorner", a)
    g.CornerRadius = UDim.new(1, 1)
    g.CornerRadius = UDim.new(1, 1)
    return(e)
end

task.spawn(function()
    placemarker.Anchored = true
    placemarker.CanCollide = false
    placemarker.Size = Vector3.new(0,0.1,0)
    placemarker.Transparency = 1
    makemarker(placemarker, placemarker, Atlas["Target Aimbot"].Dot.Color, 1, 0)
end)

RunService.heartbeat:Connect(function()
    if not TargetPlayer then
        placemarker.CFrame = CFrame.new(0, 9999, 0)
        return
    end
    if TargetPlayer == nil then
        placemarker.CFrame = CFrame.new(0, 9999, 0)
        return
    end
    if Atlas['Target Aimbot'].Enabled and Atlas['Target Aimbot']['Dot'].Enabled and TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("HumanoidRootPart") and TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        placemarker.CFrame = CFrame.new(TargetPlayer.Character[Atlas['Target Aimbot'].AimPart].Position + (TargetPlayer.Character:WaitForChild("HumanoidRootPart").Velocity * Atlas['Target Aimbot'].Prediction))
    end
end)

RunService.heartbeat:Connect(function()
    TargetLine.Color = Atlas['Target Aimbot'].Tracer.Color
    TargetLine.Thickness = Atlas['Target Aimbot'].Tracer.Thickness
end)

RunService.heartbeat:Connect(function()
if Atlas.World.Textures.Enabled and Atlas.World.Enabled then
    for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
            v.Material = Atlas.World.Textures.Material
            v.Color = Atlas.World.Textures.Color
            if v:IsA("Texture") then
                v:Destroy()
            end
            if Atlas.World.Textures['Random Color'] then
                local hue = tick() % 1 / 1
                local rainbow = Color3.fromHSV(hue, 1, 1)
                v.Color = rainbow
            end
        end
    end
end
end)

if Atlas['Script']['Auto Set']['Get Up'] and Atlas['Script']['Auto Set']['Enabled'] then
    Client.Character.Humanoid:ChangeState("GettingUp")
end

local PerformanceStats = game:GetService("CoreGui"):WaitForChild("RobloxGui"):WaitForChild("PerformanceStats");
task.spawn(function()
    pcall(function()
        for __, v in pairs(game.CoreGui.RobloxGui.PerformanceStats:GetChildren()) do
            if v.Name == "PS_Button" and v.StatsMiniTextPanelClass.TitleLabel.Text == "Mem" then
                Memory = v.StatsMiniTextPanelClass.ValueLabel
            end
        end
        Memory:GetPropertyChangedSignal("Text"):Connect(function()
            if Atlas.Misc['Memory Spoof']['Enabled'] then 
                local random1 = math.random(Atlas.Misc['Memory Spoof']['Minimum Memory'], Atlas.Misc['Memory Spoof']['Minimum Memory'])
                local rand1 = math.random(0,9)
                local rand2 = math.random(0,9)
                Memory.Text = "".. random1 .. "." .. rand1 .. rand2.. " MB"
            end
        end)
    end)
end)

for I, Child in next, PerformanceStats:GetChildren() do
    if Child.StatsMiniTextPanelClass.TitleLabel.Text == "Ping" then
        PingLabel = Child.StatsMiniTextPanelClass.ValueLabel;
        break;
    end;
end;

PingLabel:GetPropertyChangedSignal("Text"):Connect(function()
    if Atlas.Misc['Ping Spoof']['Enabled'] then
        PingLabel.Text = Atlas.Misc['Ping Spoof']['Spoof To'];
    end
end);
PingLabel.Text = Atlas.Misc['Ping Spoof']['Spoof To'];

RunService.Heartbeat:Connect(function()
    if Atlas.Misc['Anti Lock']['Show Velocity'] then
        velocityshower.Text = "Velocity: "..tostring(math.round(Client.Character:WaitForChild("HumanoidRootPart").Velocity.X)) .. ", " ..tostring(math.round(Client.Character:WaitForChild("HumanoidRootPart").Velocity.Y)) ..", " .. tostring(math.round(Client.Character:WaitForChild("HumanoidRootPart").Velocity.Z))
        velocityshower.Visible = true
    else
        velocityshower.Visible = false
    end
end)

RunService.Heartbeat:Connect(function()
    sound.Volume = Soundsvolumelol    
    if customsoundid then 
    sound2.SoundId = "rbxassetid://".. customsoundid .."" 
    end
end)


Client:GetMouse().KeyDown:Connect(function(keyPressed)
        if keyPressed == string.lower(Atlas.Animations.Lay.Keybind) and Atlas.Animations.Lay.Enabled and Atlas.Animations.Enabled then
            local args = {
                [1] = "AnimationPack",
                [2] = "Lay"
            }
            game:GetService("ReplicatedStorage").MainEvent:FireServer(unpack(args))
        end

    
    if keyPressed == string.lower(Atlas.Animations.Greet.Keybind) and Atlas.Animations.Greet.Enabled and Atlas.Animations.Enabled then
        local args = {
            [1] = "AnimationPack",
            [2] = "Greet"
        }
        game:GetService("ReplicatedStorage").MainEvent:FireServer(unpack(args))
    end
    
    if keyPressed == string.lower(Atlas.Animations.Lean.Keybind) and Atlas.Animations.Lean.Enabled and Atlas.Animations.Enabled then
        local args = {
            [1] = "AnimationPack",
            [2] = "Lean"
        }
        game:GetService("ReplicatedStorage").MainEvent:FireServer(unpack(args))
    end
    
    if keyPressed == string.lower(Atlas.Animations.Praying.Keybind) and Atlas.Animations.Praying.Enabled and Atlas.Animations.Enabled then
        local args = {
            [1] = "AnimationPack",
            [2] = "Praying"
        }
        game:GetService("ReplicatedStorage").MainEvent:FireServer(unpack(args))
    end
end)

function SortInventory() 
    RunService.RenderStepped:Wait()
    local temp = {}
    for i=1,#Client.Backpack:GetChildren() do
        local tool = get_instance(Client.Backpack,"Tool")
        if tool then
            table.insert(temp,tool)
            tool.Parent = game
        end
    end
    for x=1,#Atlas['Gun Sorting']['Slots'] do
        for i=1,#temp do
            if string.sub(string.lower(tostring(temp[i])),1,string.len(string.lower(Atlas['Gun Sorting']['Slots'][x]))) == string.lower(Atlas['Gun Sorting']['Slots'][x]) then
                temp[i].Parent = Client.Backpack
                wait(0.105)
            end
        end
    end
    if Atlas['Gun Sorting']['Delete Extra'] then 
       for i=1,#temp do
           if not table.find(Atlas['Gun Sorting']['Slots'],temp[i].Name) then 
               temp[i]:Destroy()
               wait(0)
           end
       end
   else
       for i=1,#temp do
               temp[i].Parent = Client.Backpack
               wait(0)
       end
   end
end

local custom_math = {} do
    custom_math.recalculate_velocity = (function(part, update_time) 
        local current_position = part.Position;
        local current_time = tick();
        task.wait(1 / update_time);
        local new_position = part.Position;
		local new_time = tick();
		local distance_traveled = (new_position - current_position);
		local time_interval = (new_time - current_time);
		local velocity = (distance_traveled / time_interval);
		current_position = new_position;
		current_time = new_time;
        return velocity;
	end);
end

RunService.heartbeat:connect(function()
    if Atlas['Target Aimbot']['Target Strafe'].Enabled  then
        if TargetPlayer then
            if Atlas['Target Aimbot']['Target Strafe'].Mode == "Strafe" then
                local targpos = TargetPlayer.Character:WaitForChild("HumanoidRootPart").Position
                Client.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(targpos +Vector3.new(math.cos(tick() * Atlas['Target Aimbot']['Target Strafe'].Speed) * Atlas['Target Aimbot']['Target Strafe'].Distance,Atlas['Target Aimbot']['Target Strafe'].Height,math.sin(tick() * Atlas['Target Aimbot']['Target Strafe'].Speed) * Atlas['Target Aimbot']['Target Strafe'].Distance))
            end
        end
    end
end)


local autoSelectTick = 0

function autoselectlol()
if autoSelectTick - tick() < getgenv().autoselectdelay then 
    autoSelectTick = tick()
    local closestPlayer
    local shortestDistance = math.huge 
    for _, player in next, Players:GetPlayers() do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player ~= Client then
            local distance = (Client.Character:WaitForChild("HumanoidRootPart").Position - player.Character:WaitForChild("HumanoidRootPart").Position).magnitude
            if distance < shortestDistance then
                TargetPlayer = player
                shortestDistance = distance
            end
        end
    end
end 
end

RunService.heartbeat:Connect(function()
    if getgenv().autoselectplayerLOL then
        autoselectlol()
    end
end)

RunService.heartbeat:Connect(function()
    if Atlas.Misc['Anti Lock'].Enabled then
        if Atlas.Misc['Anti Lock'].Type == "Sky" then 
            local vel = Client.Character:WaitForChild("HumanoidRootPart").Velocity
            Client.Character:WaitForChild("HumanoidRootPart").Velocity = Vector3.new(0,90,0) 
            RunService.RenderStepped:Wait()
            Client.Character:WaitForChild("HumanoidRootPart").Velocity = vel
        end 
        if Atlas.Misc['Anti Lock'].Type == "Ground" then 
            local vel = Client.Character:WaitForChild("HumanoidRootPart").Velocity
            Client.Character:WaitForChild("HumanoidRootPart").Velocity = Vector3.new(0,-90,0) 
            RunService.RenderStepped:Wait()
            Client.Character:WaitForChild("HumanoidRootPart").Velocity = vel
        end 
        if Atlas.Misc['Anti Lock'].Type == "Velocity Multiplier" then 
            local velocity = Client.Character:WaitForChild("HumanoidRootPart").Velocity
            Client.Character:WaitForChild("HumanoidRootPart").Velocity = velocity * Atlas.Misc['Anti Lock'].Multiplier.Power
            RunService.RenderStepped:wait()
            Client.Character:WaitForChild("HumanoidRootPart").Velocity = velocity
        end
        if Atlas.Misc['Anti Lock'].Type == "Random" then 
            local velocity = Client.Character:WaitForChild("HumanoidRootPart").Velocity
            Client.Character:WaitForChild("HumanoidRootPart").Velocity = velocity * 0 + Vector3.new(math.random(1,16384),math.random(1,16384),math.random(1,16384))
            Client.Character:WaitForChild("HumanoidRootPart").AssemblyLinearVelocity = velocity * 0 + Vector3.new(math.random(1,16384),math.random(1,16384),math.random(1,16384))
            RunService.RenderStepped:wait()
            Client.Character:WaitForChild("HumanoidRootPart").Velocity = velocity
            Client.Character:WaitForChild("HumanoidRootPart").AssemblyLinearVelocity = velocity
        end
        if Atlas.Misc['Anti Lock'].Type == "Offset" then 
            local velocity = Client.Character:WaitForChild("HumanoidRootPart").Velocity
            local assemblyvelocity = Client.Character:WaitForChild("HumanoidRootPart").AssemblyLinearVelocity
            local oldvel = Client.Character:WaitForChild("HumanoidRootPart").Velocity
            Client.Character:WaitForChild("HumanoidRootPart").Velocity = Vector3.new(Atlas.Misc['Anti Lock'].Offset.X, Atlas.Misc['Anti Lock'].Offset.Y, Atlas.Misc['Anti Lock'].Offset.Z)
            Client.Character:WaitForChild("HumanoidRootPart").AssemblyLinearVelocity = Vector3.new(Atlas.Misc['Anti Lock'].Offset.X, Atlas.Misc['Anti Lock'].Offset.Y, Atlas.Misc['Anti Lock'].Offset.Z)
            RunService.RenderStepped:wait()
            Client.Character:WaitForChild("HumanoidRootPart").AssemblyLinearVelocity = assemblyvelocity
            Client.Character:WaitForChild("HumanoidRootPart").Velocity = velocity
        end
    end
end)

AtlasWords1 = {
    "😂 Dumping? Thought so... 😡 Start using Atlas to up your game 😝😝", 
    "🧐 Atlas has predicted your movements to the grave.", 
    "🤥 You'd be lying if you said you didn't want Atlas!!",
    "No Atlas, no talk.",
    "Found a better Displacement method yet? Ft. Atlas",
    "🤓",
	"WHAT DO YOU MEAN??? HUMANOID.MOVEDIRECTION CAN BE USED FOR PREDICTION??!?!?!",
	"Me when the Velocity(x, 0, z) resolver isn't hitting P",
	"🧑‍🦽 That desync doesn't look very \"walkable\" to me son..",
	"Farzad claims that 30$ for two scripts isn't expensive????",
	"Can't believe the new Atlas update is already out!!"
}

AtlasWords2 = {
    "Atlas > ты 😱 ",
    "Atlas владеет тобой 😹 😹 ",
    "Будь хорошим, получи Atlas 🙂 ",
    "Перестань плакать и получи Atlas",
    "Тогда проверни операцию на мне 😹 😹 😹 😹 ",
    "Получи Atlas прямо сейчас, братан!!",
    "Прицелись и получи Atlas",
    "Перестань жаловаться и получи Atlas 🤕 🤕 ",
    "Atlas > Твоя карьера",
    "Да, Atlas лучший 😳 😳 ",
    "У Atlas больше возможностей, чем у твоей бабушки🥸🥸",
    "становись лучше, чувак🥳",
    "Братан, просто купи сэнки бокс, ЛОЛ",
    "Йоу, 12-летний, купи сэнки бокс!",
    "представь, что умираешь 😅 😅 😅 LLLL",
    "Ой, я забыл, что ты там был, о, подожди, ты на самом деле все равно не существуешь.",
    "ez ez тебе похлопал низкий уровень, ха-ха!",
    " 🤓 : ты не можешь просто эксплуатировать здесь!!111!!111 это незаконно!!!!",
    "почему ты умираешь для меня, братан, фр, фр",
    "похлопал пользователь Atlas 💀",
    "братану похлопали, лол",
    " 🤓 : представь, что ты сирота, а где твои, тогда иди проверь",
    "прости, моя цель попала в тебя? если так, то ты мусор 😅 😅 😅 ",
    "у братана проблемы с навыками 😅 😅 😅 ",
    "придурок даже не может победить меня",
    "fr fr Atlas сверху",
    "Как дела, ребята, меня арестовывали из-за множества преступлений, включая мошенничество",
    "wdym touch grass, у меня есть такая же на ногах",
    "подарочная карта fortnite на 19$, кто хочет ее!!!??",
    "Ты сериус рн?",
    "эз бозо",
    "твой отец не вернулся из магазина молока по какой-то причине",
    "черт возьми, братан, твоя мать бросила тебя, когда ты родился",
    "С кем ты разговариваешь? бот, говорящий об убийстве? 🤓 ",
    "черт возьми, братан, тебе действительно нужен психотерапевт 😅 😅 ",
    " 🤓 : прекрати взламывать!!!! это против правил!!!",
    "wenomechainsama tumajarbisaun",
    "Тогда проверни на мне операцию",
    "тебе стоит вернуться в детский сад, братан",
    "я просто лучше тебя!!!!!",
    "Сэнки бокс лучше, чем ты, смх, смх, смх 😅 "
}
AtlasWords3 = {
    "imagine dying 😅😅😅 LLLL",
    "Oops i forgot you were there, oh wait you actually dont exist anyways.",
    "ez ez you got clapped by a low level haha!",
    "🤓: you cant just exploit in here!!111!!111 its illegal!!!!",
    "why are you dying to me bro fr fr",
    "clapped by Atlas user 💀",
    "bro got clapped lol",
    "🤓: imagine being fatherless'  where are yours then go check 😁😁😁",
    "sorry did my target aim hit you? if so then youre trash 😅",
    "bro got skill issues 😅😅😅",
    "bozo cant even beat me",
    "fr fr Atlas on top",
    "What's up 'Hackle cheatle' here guys, I have been arresting due to multiple crimes including cheating.",
    "wdym touch grass i have one of those on my feet",
    "fortnite 19$ gift card who wants it!!!??",
    "Are you serius rn?",
    "ez bozo",
    "your dad never came back from the milk store for a reason",
    "damn bro did your mother drop you when youre born",
    "Who are you talking to? a kill say bot? 😅",
    "damn bro you really need a therapist 😅😅",
    "🤓: stop hacking!!!! its against the rules!!!",
    "wenomechainsama tumajarbisaun",
    "Roll the opps on me then😹😹😹😹",
    "you should go back to kindergarden bro 😂",
    "im just better than you!!!!!",
    "Atlas is better than you smh smh smh 😅"
}

getgenv().ChatSpammerDelay = 0.7

if Client then
    if Client:FindFirstChild("Christmas_Sock") then
        Client:FindFirstChild("Christmas_Sock"):Destroy()
    end
end

spawn(function()
    while wait() do
        if getgenv().enablefarms and getgenv().farmstype == "ATM" then
            for _, v in pairs(workspace.Cashiers:GetChildren()) do
                if v:FindFirstChild("Head") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                    repeat
                        wait()
                        if getgenv().enablefarms and getgenv().farmstype == "ATM" then
                            if Alive(Client) then
                                Client.Character:WaitForChild("HumanoidRootPart").CFrame = v.Head.CFrame * CFrame.new(0, -1, 2.5)
                                if Client.Backpack:FindFirstChild("Combat") then
                                    Client.Backpack.Combat.Parent = Client.Character
                                end
                                if Client.Character:FindFirstChild("Combat") then
                                    Client.Character['Combat']:Activate()
                                else 
                                    Notifications:Notification("combat tool not found in backpack", 3, Library.Accent, false)
                                end
                            end
                        end
                        fireclickdetector(v.ClickDetector)
                    until v.Humanoid.Health <= 0 
                    pcall(function()
                        Client.Character:FindFirstChildOfClass("Tool").Parent = Client.Backpack
                    end)
                    wait(5)
                end
            end
        end
    end
end)

task.spawn(function()
    while task.wait(0.07) do
        if (TargetL and TargetPlayer and TargetPlayer.Character and Atlas['Target Aimbot']['Target Strafe'].Enabled and Atlas['Target Aimbot']['Target Strafe']['Auto Shoot On Strafe']) then 
            local Gun = GetTool()
            if (Gun and TargetPlayer) then 
                Gun:Activate()
            end
        end
    end
end)

task.spawn(function()
    while task.wait(0.07) do
        if (TargetL and TargetPlayer and TargetPlayer.Character and getgenv().csyncenabled and getgenv().csyncautoshoot) then 
            local Gun = GetTool()
            if (Gun and TargetPlayer) then 
                Gun:Activate()
            end
        end
    end
end)

RunService.Stepped:Connect(function()
	if Atlas.Misc['Auto Reload'] == true then
        if Client.Character:FindFirstChildWhichIsA("Tool") then
            if Client.Character:FindFirstChildWhichIsA("Tool"):FindFirstChild("Ammo") then
                if Client.Character:FindFirstChildWhichIsA("Tool"):FindFirstChild("Ammo").Value <= 0 then
                    game:GetService("ReplicatedStorage").MainEvent:FireServer("Reload",Client.Character:FindFirstChildWhichIsA("Tool"))
                    wait(1)
                end
            end
        end
    end
end)

RunService.heartbeat:Connect(function()
    if Atlas.Misc['Anti Slow'] then
        local character = Client.Character
        local bodyEffects = character:WaitForChild("BodyEffects")
        local movement = bodyEffects:WaitForChild("Movement")

        local DeletePart = movement:FindFirstChild('NoJumping') or movement:FindFirstChild('ReduceWalk') or movement:FindFirstChild('NoWalkSpeed')
        if DeletePart then
            DeletePart:Destroy()
        end

        if bodyEffects.Reload.Value then
            bodyEffects.Reload.Value = false
        end
    end
end)

RunService.heartbeat:Connect(function()
    if TargetPlayer and TargetPlayer.Character then 
        if Atlas.Networking.Resolver.Auto.Enabled then

            local TargetPos = TargetPlayer.Character[Atlas['Target Aimbot'].AimPart].Position
            local TargetVel = TargetPlayer.Character[Atlas['Target Aimbot'].AimPart].Velocity
            local TargetMov = TargetPlayer.Character.Humanoid.MoveDirection
            local Magnitude = TargetVel.magnitude
            local Magnitude2 = TargetMov.magnitude

            if Magnitude < 1 and Magnitude2 > 0.01 then
                Atlas.Networking.Resolver.Enabled = true
            elseif Magnitude > 5 and Magnitude2 < 0.01 then
                Atlas.Networking.Resolver.Enabled = true
            else
                Atlas.Networking.Resolver.Enabled = false
            end
        else
            Atlas.Networking.Resolver.Enabled = false
        end
    end
end)

RunService.heartbeat:Connect(function()
    if CameraTarget and CameraTarget.Character then 
        if Atlas.Networking.Resolver.Auto.Enabled then

            local TargetPos = CameraTarget.Character[Atlas.Aimbot.AimPart].Position
            local TargetVel = CameraTarget.Character[Atlas.Aimbot.AimPart].Velocity
            local TargetMov = CameraTarget.Character.Humanoid.MoveDirection
            local Magnitude = TargetVel.magnitude
            local Magnitude2 = TargetMov.magnitude

            if Magnitude < 1 and Magnitude2 > 0.01 then
                Atlas.Networking.Resolver.Enabled = true
            elseif Magnitude > 5 and Magnitude2 < 0.01 then
                Atlas.Networking.Resolver.Enabled = true
            else
                Atlas.Networking.Resolver.Enabled = false
            end
        else
            Atlas.Networking.Resolver.Enabled = false
        end
    end
end)

RunService.heartbeat:Connect(function()
    if Prey and Prey.Character then 
        if Atlas.Networking.Resolver.Auto.Enabled then

            local TargetPos = Prey.Character[Atlas['Silent Aim'].AimPart].Position
            local TargetVel = Prey.Character[Atlas['Silent Aim'].AimPart].Velocity
            local TargetMov = Prey.Character.Humanoid.MoveDirection
            local Magnitude = TargetVel.magnitude
            local Magnitude2 = TargetMov.magnitude

            if Magnitude < 1 and Magnitude2 > 0.01 then
                Atlas.Networking.Resolver.Enabled = true
            elseif Magnitude > 5 and Magnitude2 < 0.01 then
                Atlas.Networking.Resolver.Enabled = true
            else
                Atlas.Networking.Resolver.Enabled = false
            end
        else
            Atlas.Networking.Resolver.Enabled = false
        end
    end
end)

RunService.RenderStepped:Connect(function()
    if Atlas.Misc['No Jumppcool Down'] or getgenv().nojumpcooldown then
        Client.Character.Humanoid.UseJumpPower = false
    else
        Client.Character.Humanoid.UseJumpPower = true
    end
end)

RunService.RenderStepped:Connect(function()
    if getgenv().headlessclient then
        _G.Save0 = Client.Character.Head.face.Texture
        Client.Character.Head.Transparency = 1
        Client.Character.Head.face.Texture = 0
    else
        if _G.Save0 then
            Client.Character.Head.Transparency = 0
            Client.Character.Head.face.Texture = _G.Save0
        end
    end
end)

Script.Functions.NewDrawing = function(Type, Properties)
    local NewDrawing = Drawing.new(Type)

    for i,v in next, Properties or {} do
        NewDrawing[i] = v
    end
    return NewDrawing
end

Script.Functions.NewPlayer = function(Player)
    Script.EspPlayers[Player] = {
        Name = Script.Functions.NewDrawing("Text", {Color = Color3.fromRGB(255, 255, 255), Outline = true, Visible = false, Center = true, Size = 20, Font = 0}),
        BoxOutline = Script.Functions.NewDrawing("Square", {Color = Color3.fromRGB(0, 0, 0), Thickness = 3, Visible = false}),
        Box = Script.Functions.NewDrawing("Square", {Color = Color3.fromRGB(255, 255, 255), Thickness = 1, Visible = false}),
        HealthBarOutline = Script.Functions.NewDrawing("Line", {Color = Color3.fromRGB(0, 0, 0), Thickness = 3, Visible = false}),
        HealthBar = Script.Functions.NewDrawing("Line", {Color = Color3.fromRGB(0, 255, 0), Thickness = 1, Visible = false}),
        HealthText = Script.Functions.NewDrawing("Text", {Color = Color3.fromRGB(0, 255, 0), Outline = true, Visible = false, Center = true, Size = 50, Font = 0}),
        Distance = Script.Functions.NewDrawing("Text", {Color = Color3.fromRGB(255, 255, 255), Outline = true, Visible = false, Center = true, Size = 50, Font = 0}),
        ArmorBarOutline = Script.Functions.NewDrawing("Line", {Color = Color3.fromRGB(0, 0, 0), Thickness = 3, Visible = false}),
        ArmorBar = Script.Functions.NewDrawing("Line", {Color = Color3.fromRGB(255, 255, 255), Thickness = 1, Visible = false}),
        ArmorText = Script.Functions.NewDrawing("Text", {Color = Color3.fromRGB(0, 255, 0), Outline = true, Visible = false, Center = true, Size = 50, Font = 0}),
        Tool = Script.Functions.NewDrawing("Text", {Color = Color3.fromRGB(255, 255, 255), Outline = true, Visible = false, Center = true, Size = 50, Font = 0}),        
        Tracer = Script.Functions.NewDrawing("Line", {Color = Color3.fromRGB(255, 255, 244), Thickness = 1, Visible = false}),
    }
end

Script.Functions.UpdateEsp = function()
    for i,v in pairs(Script.EspPlayers) do
        if Atlas.Misc.ESP.Enabled and i ~= Client and i.Character and i.Character:FindFirstChild("Humanoid") and i.Character:FindFirstChild("HumanoidRootPart") and i.Character:FindFirstChild("Head") then
            local Hum = i.Character.Humanoid
            local Hrp = i.Character.HumanoidRootPart
            
            local Vector, OnScreen = Camera:WorldToViewportPoint(i.Character.HumanoidRootPart.Position)
            local Size = (Camera:WorldToViewportPoint(Hrp.Position - Vector3.new(0, 3, 0)).Y - Camera:WorldToViewportPoint(Hrp.Position + Vector3.new(0, 2.6, 0)).Y) / 2
            local BoxSize = Vector2.new(math.floor(Size * 1.5), math.floor(Size * 1.9))
            local BoxPos = Vector2.new(math.floor(Vector.X - Size * 1.5 / 2), math.floor(Vector.Y - Size * 1.6 / 2))
            local BottomOffset = BoxSize.Y + BoxPos.Y + 1

            if OnScreen then
                if Atlas.Misc.ESP.Names.Enabled then
                    v.Name.Position = Vector2.new(BoxSize.X / 2 + BoxPos.X, BoxPos.Y - 16)
                    v.Name.Outline = Atlas.Misc.ESP.Names.OutLine
                    v.Name.Text = tostring(i)

                    v.Name.Color = Atlas.Misc.ESP.Names.Color
                    v.Name.OutlineColor = Color3.fromRGB(0, 0, 0)
                    v.Name.Font = 0
                    v.Name.Size = 16

                    v.Name.Visible = true
                else
                    v.Name.Visible = false
                end
                
                if Atlas.Misc.ESP.Box.Enabled then
                    v.BoxOutline.Size = BoxSize
                    v.BoxOutline.Position = BoxPos
                    v.BoxOutline.Visible = true
                    v.BoxOutline.Color = Color3.fromRGB(0, 0, 0)
    
                    v.Box.Size = BoxSize
                    v.Box.Position = BoxPos
                    v.Box.Color = Atlas.Misc.ESP.Box.Color
                    v.Box.Visible = true
                else
                    v.BoxOutline.Visible = false
                    v.Box.Visible = false
                end
                if Atlas.Misc.ESP.HealthBar.Enabled then
                    v.HealthBar.From = Vector2.new((BoxPos.X - 5), BoxPos.Y + BoxSize.Y)
                    v.HealthBar.To = Vector2.new(v.HealthBar.From.X, v.HealthBar.From.Y - (Hum.Health / Hum.MaxHealth) * BoxSize.Y)
                    v.HealthBar.Color = Atlas.Misc.ESP.HealthBar.Color
                    v.HealthBar.Visible = true

                    v.HealthBarOutline.From = Vector2.new(v.HealthBar.From.X, BoxPos.Y + BoxSize.Y + 1)
                    v.HealthBarOutline.To = Vector2.new(v.HealthBar.From.X, (v.HealthBar.From.Y - 1 * BoxSize.Y) -1)
                    v.HealthBarOutline.Color = Color3.fromRGB(0, 0, 0)
                    v.HealthBarOutline.Visible = true
                else
                    v.HealthBarOutline.Visible = false
                    v.HealthBar.Visible = false
                end
                if Atlas.Misc.ESP.Tool.Enabled then
                    v.Tool.Position = Vector2.new(BoxSize.X / 2 + BoxPos.X, BottomOffset)
                    v.Tool.Outline = true
                    if i.Character:FindFirstChildWhichIsA("Tool") then
                        if i.Character:FindFirstChild("GunScript", true) ~= nil or i.Character:FindFirstChild("FlameThrowerScript", true) ~= nil or i.Character:FindFirstChild("RPGScript", true) ~= nil then
                            v.Tool.Text = i.Character:FindFirstChildWhichIsA("Tool").Name
                        else
                            v.Tool.Text = "[" .. i.Character:FindFirstChildWhichIsA("Tool").Name .. "]"
                        end
                    else
                        v.Tool.Text = "[None]"
                    end
                    v.Tool.Color = Atlas.Misc.ESP.Tool.Color
                    v.Tool.OutlineColor = Color3.fromRGB(0, 0, 0)
                    
                    v.Tool.Font = 0
                    v.Tool.Size = 10

                    v.Tool.Visible = true
                else
                    v.Tool.Visible = false
                    v.Tool.Position = Vector2.new(BoxSize.X / 2 + BoxPos.X, BottomOffset)
                end

                if Atlas.Misc.ESP.Distance.Enabled then
                v.Tool.Position = Vector2.new(BoxSize.X / 2 + BoxPos.X, BottomOffset + 13)
                v.Distance.Position = Vector2.new(BoxSize.X / 2 + BoxPos.X, BottomOffset)
                v.Distance.Outline = true
                v.Distance.Text = "[" .. math.floor((Hrp.Position - Client.Character.HumanoidRootPart.Position).Magnitude) .. "m]"
                v.Distance.Color = Atlas.Misc.ESP.Distance.Color
                v.Distance.OutlineColor = Color3.fromRGB(0, 0, 0)
                BottomOffset = BottomOffset + 15

                v.Distance.Font = 0
                v.Distance.Size = 10

                v.Distance.Visible = true
                else 
                    v.Distance.Visible = false
                end
                if Atlas.Misc.ESP.HealthText.Enabled then
                    v.HealthText.Text = tostring(math.floor((Hum.Health / Hum.MaxHealth) * 100 + 0.5))
                    v.HealthText.Position = Vector2.new((BoxPos.X - 20), (BoxPos.Y + BoxSize.Y - 1 * BoxSize.Y) -1)
                    v.HealthText.Color = Atlas.Misc.ESP.HealthText.Color
                    v.HealthText.OutlineColor = Color3.fromRGB(0, 0, 0)
                    v.HealthText.Outline = true

                    v.HealthText.Font = 0
                    v.HealthText.Size = 10

                    v.HealthText.Visible = true
                else
                    v.HealthText.Visible = false
                end

                if Atlas.Misc.ESP.Tracer.Enabled then
                    if Atlas.Misc.ESP.Tracer.Method == "Screen" then
                        v.Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                    elseif Atlas.Misc.ESP.Tracer.Method == "Mouse" then
                        v.Tracer.From = UserInputService:GetMouseLocation()
                    end
                    v.Tracer.To = Vector2.new(Vector.X, Vector.Y)
                    v.Tracer.Thickness = Atlas.Misc.ESP.Tracer.Thickness
                    v.Tracer.Color = Atlas.Misc.ESP.Tracer.Color
                    v.Tracer.Visible = true
                else
                    v.Tracer.Visible = false
                end

                if i.Character:FindFirstChild("BodyEffects") and i.Character:FindFirstChild("BodyEffects"):FindFirstChild("Armor") then
                    if Atlas.Misc.ESP.ArmorBar.Enabled then
                        if Atlas.Misc.ESP.HealthBar.Enabled then
                            v.ArmorBar.From = Vector2.new((BoxPos.X - 9), BoxPos.Y + BoxSize.Y)
                        else
                            v.ArmorBar.From = Vector2.new((BoxPos.X - 5), BoxPos.Y + BoxSize.Y)
                        end
                        v.ArmorBar.To = Vector2.new(v.ArmorBar.From.X, v.ArmorBar.From.Y - (i.Character.BodyEffects.Armor.Value / 200) * BoxSize.Y)
                        v.ArmorBar.Color = Atlas.Misc.ESP.ArmorBar.Color
                        v.ArmorBar.Visible = true

                        v.ArmorBarOutline.From = Vector2.new(v.ArmorBar.From.X, BoxPos.Y + BoxSize.Y + 1)
                        v.ArmorBarOutline.To = Vector2.new(v.ArmorBar.From.X, (v.ArmorBar.From.Y - 1 * BoxSize.Y) - 1)
                        v.ArmorBarOutline.Color = Color3.fromRGB(0, 0, 0)
                        v.ArmorBarOutline.Visible = true
                    else
                        v.ArmorBarOutline.Visible = false
                        v.ArmorBar.Visible = false
                    end
                    if Atlas.Misc.ESP.ArmorText.Enabled then
                        local Offset = 22
                        if Atlas.Misc.ESP.ArmorBar.Enabled == false then
                            Offset = Offset - 7
                        end
                        if Atlas.Misc.ESP.HealthBar.Enabled == false then
                            Offset = Offset - 7
                        end
                        v.ArmorText.Text = tostring(math.floor((i.Character.BodyEffects.Armor.Value / 2) + 0.5))
                        if Atlas.Misc.ESP.HealthText.Enabled then
                            v.ArmorText.Position = Vector2.new((BoxPos.X - Offset), (BoxPos.Y + BoxSize.Y - 1 * BoxSize.Y) + 11)
                        else
                            v.ArmorText.Position = Vector2.new((BoxPos.X - Offset), (BoxPos.Y + BoxSize.Y - 1 * BoxSize.Y) - 1)
                        end
                        v.ArmorText.Color = Atlas.Misc.ESP.ArmorText.Color
                        v.ArmorText.OutlineColor = Color3.fromRGB(0, 0, 0)
                        v.ArmorText.Outline = true
                        v.ArmorText.Font = 0
                        v.ArmorText.Size = 10

                        v.ArmorText.Visible = true
                    else
                        v.ArmorText.Visible = false
                    end
                else
                    v.ArmorBarOutline.Visible = false
                    v.ArmorBar.Visible = false
                    v.ArmorText.Visible = false
                  end
            else
                v.Name.Visible = false
                v.BoxOutline.Visible = false
                v.Box.Visible = false
                v.HealthBarOutline.Visible = false
                v.HealthBar.Visible = false
                v.HealthText.Visible = false
                v.Distance.Visible = false
                v.ArmorBarOutline.Visible = false
                v.ArmorBar.Visible = false
                v.ArmorText.Visible = false
                v.Distance.Visible = false
                v.Tool.Visible = false
                v.Tracer.Visible = false
            end
        else
            v.Name.Visible = false
            v.BoxOutline.Visible = false
            v.Box.Visible = false
            v.HealthBarOutline.Visible = false
            v.HealthBar.Visible = false
            v.HealthText.Visible = false
            v.Distance.Visible = false
            v.ArmorBarOutline.Visible = false
            v.ArmorBar.Visible = false
            v.ArmorText.Visible = false
            v.Distance.Visible = false
            v.Tool.Visible = false
            v.Tracer.Visible = false
        end
    end
end

Script.Functions.Init = function()
    for _,v in pairs(Players:GetPlayers()) do
        if v ~= Client then
            Script.Functions.NewPlayer(v)
        end
    end
    Players.PlayerAdded:Connect(Script.Functions.NewPlayer)
end

Script.Functions.Init()
RunService.RenderStepped:Connect(Script.Functions.UpdateEsp)

RunService.heartbeat:Connect(function()
    Lighting.FogColor = Atlas.World.Enabled and Atlas.World.Fog.Enabled and Atlas.World.Fog.Color or Lighting.FogColor
    Lighting.FogStart = Atlas.World.Enabled and Atlas.World.Fog.Enabled and Atlas.World.Fog.Start or Lighting.FogStart
    Lighting.FogEnd = Atlas.World.Enabled and Atlas.World.Fog.Enabled and Atlas.World.Fog.End or Lighting.FogEnd
    Lighting.Ambient = Atlas.World.Enabled and Atlas.World.Ambient.Enabled and Atlas.World.Ambient.Color or Lighting.Ambient
    Lighting.Brightness = Atlas.World.Enabled and Atlas.World.Brightness.Enabled and Atlas.World.Brightness.Amount or Lighting.Brightness
    Lighting.ClockTime =  Atlas.World.Enabled and Atlas.World['Clock Time'].Enabled and Atlas.World['Clock Time'].Amount or Lighting.ClockTime
    Lighting.ExposureCompensation = Atlas.World.Enabled and Atlas.World['World Exposure'].Enabled and Atlas.World['World Exposure'].Amount or Lighting.ExposureCompensation
end)

--[[RunService.RenderStepped:Connect(function()
    if Alive(Client) then
        if Atlas.Misc['Movement Speed'].Enabled and Atlas.Misc['Movement Speed'].Type == "CFrame" and Alive(Client) then
            if Client.Character.Humanoid.MoveDirection.Magnitude > 0 then
                for i = 1, Atlas.Misc['Movement Speed'].Speed do
                    Client.Character:TranslateBy(Client.Character.Humanoid.MoveDirection)
                end
            end 
        end
    end
end)--]]  -- old walkspeed

RunService.RenderStepped:Connect(function()
    if Alive(Client) and game.PlaceId == 2788229376 then
        local movementConfig = Atlas.Misc['Movement Speed']
        if movementConfig.Enabled and movementConfig.Type == "CFrame" then
            local character = Client.Character
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.MoveDirection.Magnitude > 0 then
                local speed = movementConfig.Speed + math.random(-1, 1) * 0.1
                character:TranslateBy(humanoid.MoveDirection.Unit * (speed / 9.5))
            end
        end
    else
        local movementConfig = Atlas.Misc['Movement Speed']
        if movementConfig.Enabled and movementConfig.Type == "CFrame" then
            local character = Client.Character
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.MoveDirection.Magnitude > 0 then
                local speed = movementConfig.Speed + math.random(-1, 1) * 0.1
                character:TranslateBy(humanoid.MoveDirection.Unit * (speed / 9.5))
            end
        end
    end
end)


RunService.RenderStepped:Connect(function()
    if Atlas.Misc.Fly.Enabled then
        spawn(function()
            pcall(function()
                local velocity = Vector3.new(0, 1, 0)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    velocity = velocity + (Camera.CoordinateFrame.lookVector * Atlas.Misc.Fly.Speed)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    velocity = velocity + (Camera.CoordinateFrame.rightVector * -Atlas.Misc.Fly.Speed)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    velocity = velocity + (Camera.CoordinateFrame.lookVector * -Atlas.Misc.Fly.Speed)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    velocity = velocity + (Camera.CoordinateFrame.rightVector * Atlas.Misc.Fly.Speed)
                end
                Client.Character.HumanoidRootPart.Velocity = velocity
                Client.Character.Humanoid:ChangeState("Freefall")
            end)
        end)
    else
        Client.Character.Humanoid:ChangeState("Landing")
    end
end)

if Atlas.Script.Boombox then
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("Sound") and not (v.Name == "ShootSound" or v.Name == "NoAmmo") then
            v.Volume = 0
        end
    end
end

if Atlas.Script.Seats then
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("Seat") then
            v:Destroy()
        end
    end
end

getgenv().SelfTrail = false 
getgenv().trailsize = 1.2
getgenv().trailmaterial = "Neon"
getgenv().trailcolor = Color3.fromRGB(255, 255, 255)
getgenv().parts = 0
getgenv().trailrefreshrate = 0.2
getgenv().traildelay = 1

RunService.RenderStepped:Connect(function()
    if getgenv().SelfTrail then
        if Client.Character then
            local part = Instance.new("Part")
            part.Name = "__"
            part.CanCollide = false
            part.Size = Vector3.new(getgenv().trailsize, getgenv().trailsize, getgenv().trailsize)
            part.CFrame = Client.Character:FindFirstChild("HumanoidRootPart").CFrame * CFrame.new(0, 0, 0)
            part.Anchored = true
            part.Shape = Enum.PartType.Ball
            part.Material = getgenv().trailmaterial
            part.Parent = workspace
            part.Color = getgenv().trailcolor
            getgenv().parts = getgenv().parts + 1
            wait(getgenv().trailrefreshrate)
            getgenv().removed = false
            wait(getgenv().traildelay)
            part:Destroy()
        end
    end
end)

RunService.Stepped:Connect(function()
	if getgenv().BunnyHopYAY and Client.Character.Humanoid.FloorMaterial == Enum.Material.Air then
		Client.Character:WaitForChild("HumanoidRootPart").CFrame = Client.Character:WaitForChild("HumanoidRootPart").CFrame + Client.Character.Humanoid.MoveDirection * getgenv().BunnyHopAmount
	end
end)

function Alive(Client)
    if Client and Client.Character and Client.Character:FindFirstChild("HumanoidRootPart") ~= nil and Client.Character:FindFirstChild("Humanoid") ~= nil and Client.Character:FindFirstChild("Head") ~= nil then
        return true
    end
    return false
end

for i = 1, Atlas.Misc['Cone Hat'].Sides do
    drawings[i] = {Drawing.new("Line"), Drawing.new("Triangle")}
    drawings[i][1].ZIndex = 2
    drawings[i][1].Thickness = 2
    drawings[i][2].ZIndex = 1
    drawings[i][2].Filled = true
end

RunService.RenderStepped:Connect(function()
    local pass = Atlas.Misc['Cone Hat'].Enabled and Client.Character and Client.Character:FindFirstChild("Head") ~= nil and (Camera.CFrame.p - Camera.Focus.p).magnitude > 1 and Client.Character.Humanoid.Health > 0
    for i = 1, #drawings do
        local line, triangle = drawings[i][1], drawings[i][2]
        if pass then
            local color = Atlas.Misc['Cone Hat'].Rainbow and Color3.fromHSV((tick() % 5 / 5 - (i / #drawings)) % 1, .5, 1) or Atlas.Misc['Cone Hat'].Color
            local pos = Client.Character.Head.Position + Atlas.Misc['Cone Hat'].Offset
            local topWorld = pos + Vector3.new(0, Atlas.Misc['Cone Hat'].Height, 0)
            local last, next = (i / Atlas.Misc['Cone Hat'].Sides) * tau, ((i + 1) / Atlas.Misc['Cone Hat'].Sides) * tau
            local lastWorld = pos + (Vector3.new(math.cos(last), 0, math.sin(last)) * Atlas.Misc['Cone Hat'].Radius)
            local nextWorld = pos + (Vector3.new(math.cos(next), 0, math.sin(next)) * Atlas.Misc['Cone Hat'].Radius)
            local lastScreen = Camera:WorldToViewportPoint(lastWorld)
            local nextScreen = Camera:WorldToViewportPoint(nextWorld)
            local topScreen = Camera:WorldToViewportPoint(topWorld)
            line.From = Vector2.new(lastScreen.X, lastScreen.Y)
            line.To = Vector2.new(nextScreen.X, nextScreen.Y)
            line.Color = color
            line.Transparency = Atlas.Misc['Cone Hat']['Circle Visibility']
            line.Visible = true
            triangle.PointA = Vector2.new(topScreen.X, topScreen.Y)
            triangle.PointB = line.From
            triangle.PointC = line.To
            triangle.Color = color
            triangle.Transparency = Atlas.Misc['Cone Hat']['Hat Visibility']
            triangle.Visible = true
        else
            line.Visible = false
            triangle.Visible = false
        end
    end
end)

Client:GetMouse().KeyDown:Connect(function(keyPressed)
    if keyPressed == Atlas.Misc.Fly.Keybind then
        pcall(function()
            if Atlas.Misc.Fly.Enabled == false then
                Atlas.Misc.Fly.Enabled = true
            elseif Atlas.Misc.Fly.Enabled == true then
                Atlas.Misc.Fly.Enabled = false
            end
        end)
    end
end)

Client:GetMouse().KeyDown:Connect(function(keyPressed)
    if keyPressed == Atlas.Misc['Movement Speed'].Keybind then
        pcall(function()
            if Atlas.Misc['Movement Speed'].Enabled == false then
                Atlas.Misc['Movement Speed'].Enabled = true
            elseif Atlas.Misc['Movement Speed'].Enabled == true then
                Atlas.Misc['Movement Speed'].Enabled = false
            end
        end)
    end
end)

Client:GetMouse().KeyDown:Connect(function(Key)
   if Key == Atlas['Gun Sorting']['Keybind']:lower() then
       if Atlas['Gun Sorting']['Enabled'] then 
           SortInventory()
       end
   end
end)

local PerformanceModeEnabled = false
local OGMaterials = {}
local function ApplyPerformanceMode()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
            if not OGMaterials[v] then
                OGMaterials[v] = v.Material
            end
            v.Material = Enum.Material.SmoothPlastic
            if v:IsA("Texture") then
                v:Destroy()
            end
        end
    end
end
local function RevertToRegularGraphics()
    for part, material in pairs(OGMaterials) do
        if part and part.Parent then
            part.Material = material
        end
    end
    OGMaterials = {}
end

local g = Instance.new("ScreenGui")
g.Name = "StatsDisplay"
g.Parent = game.CoreGui

local l = Instance.new("TextLabel")
l.Size = UDim2.new(0, 300, 0, 50)
l.Position = UDim2.new(1, -160, 1, -120) 
l.AnchorPoint = Vector2.new(1, 1)
l.BackgroundTransparency = 1
l.TextStrokeTransparency = 0.5
l.TextColor3 = Color3.fromRGB(255, 255, 255)
l.Font = Enum.Font.Code
l.TextSize = 14
l.TextXAlignment = Enum.TextXAlignment.Right
l.Parent = g
l.Visible = false

if Atlas.Script['UI'].Enabled and Atlas.Script['UI']['UI Type'] == "Linoria" then
    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/DetainedMonkey2891/lin-customized/refs/heads/main/a'))()
    local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/DetainedMonkey2891/Linorias-Theme-Manager/refs/heads/main/ThemeManager'))()
    local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/refs/heads/main/addons/SaveManager.lua'))()
    local Window = Library:CreateWindow({
        Title = '             Atlas | .gg/5WwU8Zwxcu | build 1.21',
        Center = true,
        AutoShow = true,
        TabPadding = 8,
        MenuFadeTime = 0.2,
    })

    local Tabs = {
        bindslol = Window:AddTab('Binds'),
        test = Window:AddTab('Legit'),
        haha = Window:AddTab('Rage'),
        hmmm = Window:AddTab('Visuals'),
        tast = Window:AddTab('Misc'),
        nenene = Window:AddTab('Network'),
        ['UI Settings'] = Window:AddTab('UI'),
    }
    
    local t = Tabs.test:AddLeftGroupbox('Aim Assist')
    local a = Tabs.test:AddRightGroupbox('Silent Aim')
    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('menu')

    local bindsrnaiminglol = Tabs.bindslol:AddLeftTabbox()
    local bindingformyrighthand = Tabs.test:AddLeftTabbox()
    local TabBox = Tabs.test:AddRightTabbox()
    local TabBox17 = Tabs.tast:AddLeftTabbox()
    local negalel = Tabs.tast:AddRightTabbox()
    local testtab1 = Tabs.tast:AddLeftTabbox()
    local crosshair = Tabs.tast:AddRightTabbox()
    local antiatuololxd = Tabs.tast:AddLeftTabbox()
    local macroing = Tabs.tast:AddLeftTabbox()
    local p = Tabs.haha:AddLeftTabbox()
    local h = Tabs.haha:AddRightTabbox()
    local helloworldstfu = Tabs.hmmm:AddLeftTabbox()
    local urrr = Tabs.tast:AddLeftTabbox()
    local movebruh = Tabs.tast:AddRightTabbox()
    local ightbruhthesetheopps = Tabs.nenene:AddLeftTabbox()
    local lookatme = Tabs.hmmm:AddRightTabbox()
    local wspson = Tabs.tast:AddRightTabbox()
    local utchec = Tabs.tast:AddRightTabbox()
    local Tab2 = TabBox:AddTab('Silent FOV')
    local Tab3 = utchec:AddTab('Utility')
    local resolverbruh = utchec:AddTab('Resolver')
    local spoofings = testtab1:AddTab('Spoofing')
    local dadaontop = TabBox17:AddTab('Animations')
    local dadaontop1 = TabBox17:AddTab('Gun Sorting')
    local lolchecks = utchec:AddTab('Checks')
    local movebruh1 = movebruh:AddTab('Movement')
    local crosshairtabslolxdsym = crosshair:AddTab('Crosshair')
    local crosshairspin = crosshair:AddTab('Spinning')
    local crosshairresize = crosshair:AddTab('Resizing')
    local antiautolo = antiatuololxd:AddTab('Character Mods')
    local macropart = macroing:AddTab('Macro')
    local ohokay = p:AddTab('Target Aimbot')
    local strafs = p:AddTab('Strafe')
    local csynccccbruhhhhhhhhhh = p:AddTab('C-Sync')
    local visualsui = h:AddTab('Visuals')
    local playersaretheopps = ightbruhthesetheopps:AddTab('Players')
    local buythisshitcuhh = ightbruhthesetheopps:AddTab('Shop')
    local teleportherebruh = ightbruhthesetheopps:AddTab('Teleports')
    local esplolstfu = helloworldstfu:AddTab('P-ESP')
    local onlyicanseeyou = helloworldstfu:AddTab('C-Sided')
    local lookattheworlddd = helloworldstfu:AddTab('World')
    local customsky = helloworldstfu:AddTab('S-Box')
    local selflooks = lookatme:AddTab('Self Trail')
    local selfconehat = lookatme:AddTab('Self Cone Hat')
    local hitlogsfordaopps = wspson:AddTab('Hit Logs')
    local atmfarms = urrr:AddTab('Farms')
    local velocityspoofer = urrr:AddTab('Velocity')
    local bindsonlylol = bindsrnaiminglol:AddTab('Binds')
    local mymousehand = bindingformyrighthand:AddTab('Mouse Assist')
    local playsoundssir = negalel:AddTab('Sound Player')

    playersaretheopps:AddDropdown('MyPlayerDropdown', {
        SpecialType = 'Player',
        Text = 'Players',
        Tooltip = '', 
    
        Callback = function(Value)
            TargetV = Value
        end
    })

    local targetplr = TargetV

    if targetplr then 
    playersaretheopps:AddLabel("DHC:"..Players[targetplr]:WaitForChild("DataFolder").Currency.Value)
    --print("Cash: $"..game:GetService("Players")[TargetV].DataFolder.Currency.Value)
    else 
        print("target doesnt exist")
    end

    RunService.heartbeat:Connect(function()
        if bruh == true then
            local TargetPlr = TargetV
            Camera.CameraSubject = Players[TargetPlr].Character.Humanoid
        elseif bruh == false then
            Camera.CameraSubject = Client.Character.Humanoid
        end 
    end)

    playersaretheopps:AddToggle('playerview', {
        Text = 'View',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.playerview:OnChanged(function(viewing)
        bruh = viewing
    end)

    RunService.RenderStepped:Connect(function()
        while true do
            wait()
            if highlight == true then
                local TargetPlr = TargetV
                AtlasHighlight.Parent = Players[TargetPlr].Character
                AtlasHighlight.FillColor = fillcolor
                AtlasHighlight.OutlineColor = outlinecolor
            else
                if highlight == false then
                    AtlasHighlight.Parent = game.CoreGui
                end
            end
        end
    end)
      
    playersaretheopps:AddToggle('playerhighlight', {
        Text = 'Highlight',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.playerhighlight:OnChanged(function(bool)
        highlight = bool
    end)

    playersaretheopps:AddLabel('Highlight Fill Color'):AddColorPicker('ColorPicker', {
        Default = Color3.fromRGB(0, 255, 140),
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        fillcolor = bool
    end)
    
    playersaretheopps:AddLabel('Highlight Outline Color'):AddColorPicker('ColorPicker', {
        Default = Color3.fromRGB(0, 255, 140),
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        outlinecolor = bool
    end)
    
    playersaretheopps:AddButton({
        Text = 'Teleport To',
        Func = function()
            local TargetPlr = TargetV
            Client.Character:WaitForChild("HumanoidRootPart").CFrame = Players[TargetV].Character:WaitForChild("HumanoidRootPart").CFrame
        end,
        DoubleClick = false,
        Tooltip = ''
    })

    t:AddToggle('enabledcam', {
        Text = 'Enable',
        Default = Atlas.Aimbot.Enabled, 
        Tooltip = '',
    })
    
    Toggles.enabledcam:OnChanged(function(bool)
        Atlas.Aimbot.Enabled = bool
    end)

    t:AddToggle('camlock1', {
        Text = 'Notify',
        Default = Atlas.Aimbot.Notify, 
        Tooltip = '',
    })
    
    Toggles.camlock1:OnChanged(function(bool)
        Atlas.Aimbot.Notify = bool
    end)

    t:AddInput('autopredtext', {
        Default = Atlas.Aimbot.Prediction,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Aim Asist Prediction',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Aimbot.Prediction = bool
        end
    })
    
    t:AddInput('MyTextbox', {
        Default = Atlas.Aimbot.Smoothing,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Aim Assist Smoothing',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Aimbot.Smoothing = bool
        end
    })
   
    t:AddDropdown('MyDropdown', {
        Values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"}, 
        Default = Atlas.Aimbot.AimPart,
        Multi = false, 
    
        Text = 'AimPart',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Aimbot.AimPart = bool
        end
    })

    t:AddDropdown('MyDropdown', {
        Values = {"Normal", "Closest Part"}, 
        Default = Atlas.Aimbot['AimPart Type'],
        Multi = false, 
    
        Text = 'AimPart Type',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Aimbot['AimPart Type'] = bool
        end
    })

    t:AddToggle('camlock', {
        Text = 'Use Airshot',
        Default = Atlas.Aimbot['Use Airshot']['Enabled'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        Atlas.Aimbot['Use Airshot']['Enabled'] = bool
    end)

    t:AddDropdown('MyDropdown', {
        Values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"}, 
        Default = Atlas.Aimbot['Use Airshot']['AirPart'],
        Multi = false, 
    
        Text = 'Airshot Part',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Aimbot['Use Airshot']['AirPart'] = bool
        end
    })

    t:AddToggle('camlock', {
        Text = 'Use Shake',
        Default = Atlas.Aimbot.Shake.Enabled, 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        Atlas.Aimbot.Shake.Enabled = bool
    end)

    
    t:AddInput('fov1', {
        Default = Atlas.Aimbot.Shake.X,
        Numeric = false, 
        Finished = false, 
    
        Text = 'X',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Aimbot.Shake.X = bool
        end
    })

    t:AddInput('fov1', {
        Default = Atlas.Aimbot.Shake.Y,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Y',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Aimbot.Shake.Y = bool
        end
    })

    t:AddInput('fov1', {
        Default = Atlas.Aimbot.Shake.Z,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Z',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Aimbot.Shake.Z = bool
        end
    })

    t:AddToggle('camlock', {
        Text = 'Auto Flick',
        Default = Atlas.Aimbot['Auto Flick'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        Atlas.Aimbot['Auto Flick'].Enabled = bool
    end)

    t:AddDropdown('MyDropdown', {
        Values = {"Head", "UpperTorso", "LowerTorso","HumanoidRootPart"}, 
        Default = Atlas.Aimbot['Auto Flick']['Flick To'],
        Multi = false, 
    
        Text = 'Flick To',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Aimbot['Auto Flick']['Flick To'] = bool
        end
    })

    Tab2:AddToggle('fov1', {
        Text = 'Visible',
        Default = Atlas['Silent Aim'].FOV.Visible,
        Tooltip = '',
    })
    
    Toggles.fov1:OnChanged(function(bool)
        Atlas['Silent Aim'].FOV.Visible = bool
    end)

    Tab2:AddDropdown('MyDropdown', {
        Values = {"Middle", "Cursor", "Follow Target"}, 
        Default = Atlas['Silent Aim'].FOV.Position,
        Multi = false, 
    
        Text = 'FOV Type',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas['Silent Aim'].FOV.Position = bool
        end
    })
    
    Tab2:AddInput('fov1', {
        Default = Atlas['Silent Aim'].FOV.Radius,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Radius',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Silent Aim'].FOV.Radius = bool
        end
    })

    Tab2:AddInput('fov1', {
        Default = Atlas['Silent Aim'].FOV.Thickness,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Thickness',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Silent Aim'].FOV.Thickness = bool
        end
    })

    
    Tab2:AddInput('fov1', {
        Default = Atlas['Silent Aim'].FOV.Transparency,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Transparency',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Silent Aim'].FOV.Transparency = bool
        end
    })

    Tab2:AddLabel('Silent FOV Color'):AddColorPicker('ColorPicker', {
        Default = Color3.fromRGB(0, 255, 140),
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas['Silent Aim'].FOV.Color = bool
    end)
    
    a:AddToggle('fov1', {
        Text = 'Enable',
        Default = Atlas['Silent Aim']['Enabled'], 
        Tooltip = '',
    })
    
    Toggles.fov1:OnChanged(function(bool)
        Atlas['Silent Aim']['Enabled'] = bool
    end)

    a:AddDropdown('MyDropdown', {
        Values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"}, 
        Default = Atlas['Silent Aim'].AimPart,
        Multi = false, 
    
        Text = 'AimPart',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas['Silent Aim'].AimPart = bool
        end
    })

    a:AddDropdown('MyDropdown', {
        Values = {"Normal"}, 
        Default = Atlas['Silent Aim']['AimPart Type'],
        Multi = false, 
    
        Text = 'AimPart Type',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas['Silent Aim']['AimPart Type'] = bool
        end
    })

    a:AddInput('fov1', {
        Default = Atlas['Silent Aim']['Prediction'],
        Numeric = true, 
        Finished = false, 
    
        Text = 'Prediction',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Silent Aim']['Prediction'] = bool
        end
    })
    
    a:AddToggle('fov1', {
        Text = 'Use Hitchance',
        Default = Atlas['Silent Aim']['Use Hitchance'], 
        Tooltip = '',
    })
    
    Toggles.fov1:OnChanged(function(bool)
        Atlas['Silent Aim']['Use Hitchance'] = bool
    end)

    a:AddInput('fov1', {
        Default = Atlas['Silent Aim']['Hit Chance'],
        Numeric = true, 
        Finished = false, 
    
        Text = 'Hit Chance',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Silent Aim']['Hit Chance'] = bool
        end
    })

    a:AddToggle('camlock', {
        Text = 'Use Airshot',
        Default = Atlas['Silent Aim']['Use Airshot']['Enabled'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        Atlas['Silent Aim']['Use Airshot']['Enabled'] = bool
    end)

    a:AddDropdown('MyDropdown', {
        Values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"}, 
        Default = Atlas['Silent Aim']['Use Airshot']['AirPart'],
        Multi = false, 
    
        Text = 'AirPart',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas['Silent Aim']['Use Airshot']['AirPart'] = bool
        end
    })

    Tab3:AddToggle('autoprediction', {
        Text = 'Enable',
        Default = Atlas.Global.Enabled, 
        Tooltip = '',
    })
    
    Toggles.autoprediction:OnChanged(function(bool)
        Atlas.Global.Enabled = bool
    end)

    Tab3:AddToggle('autoprediction', {
        Text = 'Chat Spam',
        Default = false, 
        Tooltip = '',
    })

    Toggles.autoprediction:OnChanged(function(bool)
        getgenv().ChatSpammerEnabled = bool
        if getgenv().ChatSpammerEnabled == true then
            repeat
                if getgenv().ChatMode == "Atlas" then
                    replicatedstorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(AtlasWords1[math.random(#AtlasWords1)],"All")
                elseif getgenv().ChatMode == "Russain" then
                    replicatedstorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(AtlasWords2[math.random(#AtlasWords2)],"All")
                elseif getgenv().ChatMode == "Roasting" then
                    replicatedstorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(AtlasWords3[math.random(#AtlasWords3)],"All")
                end
                wait(getgenv().ChatSpammerDelay)
            until getgenv().ChatSpammerEnabled == false
        end
    end)

    Tab3:AddToggle('autoprediction', {
        Text = 'Auto Prediction',
        Default = Atlas.Global['Auto Prediction'], 
        Tooltip = '',
    })
    
    Toggles.autoprediction:OnChanged(function(bool)
        Atlas.Global['Auto Prediction'] = bool
    end)

    
    Tab3:AddDivider()

    Tab3:AddDropdown('MyDropdown', {
        Values = {"Atlas", "Atlas V2", "Russain", "None"}, 
        Default =  4,
        Multi = false, 
    
        Text = 'Mode',
        Tooltip = '',
    
        Callback = function(bool)
            getgenv().ChatMode = bool
        end
    })

    Tab3:AddInput('MyTextbox', {
        Default = 1,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Chat Spam Delay',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().ChatSpammerDelay = bool
        end
    })

    Tab3:AddDropdown('MyDropdown', {
        Values = {"Normal", "High"}, 
        Default =  Atlas.Global.Mode,
        Multi = false, 
    
        Text = 'Mode',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Global.Mode = bool
        end
    })

    visualsui:AddToggle('autoprediction', {
        Text = 'Target UI',
        Default = Atlas['Target Aimbot']['Target UI'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.autoprediction:OnChanged(function(bool)
        Atlas['Target Aimbot']['Target UI'].Enabled = bool
    end)

    visualsui:AddToggle('fov1', {
        Text = 'Tracer',
        Default = Atlas['Target Aimbot'].Tracer.Visible, 
        Tooltip = '',
    })
    
    Toggles.fov1:OnChanged(function(bool)
        Atlas['Target Aimbot'].Tracer.Visible = bool
    end)

    visualsui:AddToggle('autoprediction', {
        Text = 'Highlight',
        Default = Atlas['Target Aimbot'].Highlight.Enabled, 
        Tooltip = '',
    })
    
    Toggles.autoprediction:OnChanged(function(bool)
        Atlas['Target Aimbot'].Highlight.Enabled = bool
    end)

    visualsui:AddToggle('fov1', {
        Text = 'Dot',
        Default = Atlas['Target Aimbot'].Dot.Enabled, 
        Tooltip = '',
    })
    
    Toggles.fov1:OnChanged(function(bool)
        Atlas['Target Aimbot'].Dot.Enabled = bool
    end)

    visualsui:AddDropdown('MyDropdown', {
        Values = {"Default", "Follow Target", "Cursor"}, 
        Default =  Atlas['Target Aimbot']['Target UI'].Position,
        Multi = false, 
    
        Text = 'Target UI Position',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas['Target Aimbot']['Target UI'].Position = bool
        end
    })

    visualsui:AddLabel('Target UI Color'):AddColorPicker('ColorPicker', {
        Default = Atlas['Target Aimbot']['Target UI'].Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas['Target Aimbot']['Target UI'].Color = bool
    end)

    visualsui:AddLabel('Tracer Color'):AddColorPicker('ColorPicker', {
        Default = Atlas['Target Aimbot'].Tracer.Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas['Target Aimbot'].Tracer.Color = bool
    end)

    
    visualsui:AddLabel('Highlight Fill Color'):AddColorPicker('ColorPicker', {
        Default = Atlas['Target Aimbot'].Highlight['Fill Color'],
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas['Target Aimbot'].Highlight['Fill Color'] = bool
    end)
    
    visualsui:AddLabel('Highlight Outline Color'):AddColorPicker('ColorPicker', {
        Default = Atlas['Target Aimbot'].Highlight['Outline Color'],
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas['Target Aimbot'].Highlight['Outline Color'] = bool
    end)

    visualsui:AddInput('fov1', {
        Default = Atlas['Target Aimbot'].Thickness,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Tracer Thickness',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Target Aimbot'].Tracer.Thickness = bool
        end
    })

    visualsui:AddLabel('Dot Color'):AddColorPicker('ColorPicker', {
        Default = Atlas['Target Aimbot'].Dot.Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas['Target Aimbot'].Dot.Color = bool
    end)

    resolverbruh:AddToggle('resolverlol', {
        Text = 'Resolver',
        Default = Atlas.Networking.Resolver.Enabled, 
        Tooltip = '',
    })
    
    Toggles.resolverlol:OnChanged(function(bool)
        Atlas.Networking.Resolver.Enabled = bool
    end)

    resolverbruh:AddToggle('resolverlol', {
        Text = 'Auto Detect',
        Default = Atlas.Networking.Resolver.Auto.Enabled, 
        Tooltip = '',
    })
    
    Toggles.resolverlol:OnChanged(function(bool)
        Atlas.Networking.Resolver.Auto.Enabled = bool
    end)

    resolverbruh:AddDropdown('MyDropdown', {
        Values = {"Move Direction", "Recalculate", "Delta", "Move Direction (With Delay)"}, 
        Default =  Atlas.Networking.Resolver.Method,
        Multi = false, 
    
        Text = 'Method',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Networking.Resolver.Method = bool
        end
    })

    resolverbruh:AddToggle('autoprediction', {
        Text = 'Notify',
        Default = Atlas.Networking.Resolver.Notify, 
        Tooltip = '',
    })
    
    Toggles.autoprediction:OnChanged(function(bool)
         Atlas.Networking.Resolver.Notify = bool
    end)

    resolverbruh:AddInput('fov1', {
        Default = Atlas.Networking.Resolver['Move Direction Delay'],
        Numeric = false, 
        Finished = false, 
    
        Text = 'Move Direction Delay',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Networking.Resolver['Move Direction Delay'] = bool
        end
    })

    dadaontop:AddToggle('autoprediction', {
        Text = 'Enable',
        Default = Atlas.Animations.Enabled, 
        Tooltip = '',
    })
    
    Toggles.autoprediction:OnChanged(function(bool)
        Atlas.Animations.Enabled = bool
    end)

    dadaontop:AddToggle('autoprediction', {
        Text = 'Greet',
        Default = Atlas.Animations.Greet.Enabled, 
        Tooltip = '',
    })
    
    Toggles.autoprediction:OnChanged(function(bool)
        Atlas.Animations.Greet.Enabled = bool
    end)

    dadaontop:AddInput('fov1', {
        Default = Atlas.Animations.Greet.Keybind,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Greet Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Animations.Greet.Keybind = bool
        end
    })

    dadaontop:AddToggle('autoprediction', {
        Text = 'Lay',
        Default = Atlas.Animations.Lay.Enabled, 
        Tooltip = '',
    })
    
    Toggles.autoprediction:OnChanged(function(bool)
        Atlas.Animations.Lay.Enabled = bool
    end)

    dadaontop:AddInput('fov1', {
        Default = Atlas.Animations.Lay.Keybind,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Lay Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Animations.Lay.Keybind = bool
        end
    })

    dadaontop:AddToggle('autoprediction', {
        Text = 'Praying',
        Default = Atlas.Animations.Praying.Enabled, 
        Tooltip = '',
    })
    
    Toggles.autoprediction:OnChanged(function(bool)
        Atlas.Animations.Praying.Enabled = bool
    end)

    dadaontop:AddInput('fov1', {
        Default = Atlas.Animations.Praying.Keybind,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Praying Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Animations.Praying.Keybind = bool
        end
    })

    lolchecks:AddToggle('camlock', {
        Text = 'Visible',
        Default = Atlas.Checks['Visible Check'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        getgenv().VisibleCheck = bool
    end)

    lolchecks:AddToggle('camlock', {
        Text = 'Friend',
        Default = Atlas.Checks['Friend Check'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        getgenv().FriendCheck = bool
    end)

    lolchecks:AddToggle('camlock', {
        Text = 'Crew',
        Default = Atlas.Checks['Crew Check'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        getgenv().CrewCheck = bool
    end)

    lolchecks:AddToggle('camlock', {
        Text = 'Knocked',
        Default = Atlas.Checks['KO Check'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        getgenv().KOCheck = bool
    end)

    lolchecks:AddToggle('camlock', {
        Text = 'Unlock On My Death',
        Default = Atlas.Checks['Unlock On Self Death'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        getgenv().UnlockOnSelfDeath = bool
    end)

    dadaontop1:AddToggle('camlock', {
        Text = 'Enable',
        Default = Atlas['Gun Sorting']['Enabled'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        Atlas['Gun Sorting']['Enabled'] = bool
    end)

    dadaontop1:AddInput('fov1', {
        Default = Atlas['Gun Sorting']['Keybind'],
        Numeric = false, 
        Finished = false, 
    
        Text = 'Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Gun Sorting']['Keybind'] = bool
        end
    })

    spoofings:AddToggle('camlock', {
        Text = 'Memory Spoof ',
        Default = Atlas.Misc['Memory Spoof']['Enabled'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        Atlas.Misc['Memory Spoof']['Enabled'] = bool
    end)

    spoofings:AddInput('fov1', {
        Default = Atlas.Misc['Memory Spoof']['Minimum Memory'],
        Numeric = true, 
        Finished = false, 
    
        Text = 'Minimum Memory',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Memory Spoof']['Minimum Memory'] = bool
        end
    })

    spoofings:AddInput('fov1', {
        Default = Atlas.Misc['Memory Spoof']['Maximum Memory'],
        Numeric = true, 
        Finished = false, 
    
        Text = 'Maximum Memory',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Memory Spoof']['Maximum Memory'] = bool
        end
    })

    spoofings:AddToggle('camlock', {
        Text = 'Ping Spoof ',
        Default = Atlas.Misc['Ping Spoof']['Enabled'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        Atlas.Misc['Ping Spoof']['Enabled'] = bool
    end)

    spoofings:AddInput('fov1', {
        Default = Atlas.Misc['Ping Spoof']['Spoof To'],
        Numeric = true, 
        Finished = false, 
    
        Text = 'Spoof To',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Ping Spoof']['Spoof To'] = bool
        end
    })

    dadaontop1:AddToggle('camlock', {
        Text = 'Delete Extras',
        Default = Atlas['Gun Sorting']['Delete Extras'], 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        Atlas['Gun Sorting']['Delete Extras'] = bool
    end)

    crosshairtabslolxdsym:AddToggle('camlock', {
        Text = 'Enable',
        Default = Atlas.Crosshair.Enabled, 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        getgenv().crosshair.enabled = bool
    end)

    crosshairtabslolxdsym:AddLabel('Crosshair Color'):AddColorPicker('ColorPicker', {
        Default = getgenv().crosshair.color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        getgenv().crosshair.color = bool
    end)
    
    crosshairtabslolxdsym:AddDropdown('MyDropdown', {
        Values = {"Mouse", "Middle", "Target"}, 
        Default =  getgenv().crosshair.mode,
        Multi = false, 
    
        Text = 'Position',
        Tooltip = '',
    
        Callback = function(bool)
            if bool == "Mouse" then 
                getgenv().crosshair.mode = "mouse"
            elseif bool == "Middle" then
                getgenv().crosshair.mode = "center"
            end
        end
    })

    crosshairtabslolxdsym:AddDivider()

    crosshairtabslolxdsym:AddInput('fov1', {
        Default = getgenv().crosshair.width,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Width',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().crosshair.width = bool
        end
    })

    crosshairtabslolxdsym:AddInput('fov1', {
        Default = getgenv().crosshair.length,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Length',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().crosshair.length = bool
        end
    })

    crosshairtabslolxdsym:AddInput('fov1', {
        Default = getgenv().crosshair.radius,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Size',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().crosshair.radius = bool
        end
    })

    crosshairspin:AddToggle('camlock', {
        Text = 'Enable',
        Default = getgenv().crosshair.spin, 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        getgenv().crosshair.spin = bool
    end)

    crosshairspin:AddInput('fov1', {
        Default = getgenv().crosshair.spin_speed,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Speed',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().crosshair.spin_speed = bool
        end
    })

    
    crosshairspin:AddDropdown('MyDropdown', {
        Values = {"Low", "Medium", "High", "Default"}, 
        Default =  Atlas.Crosshair.Spinning['Speed Presets'],
        Multi = false, 
    
        Text = 'Speed Sets',
        Tooltip = '',
    
        Callback = function(bool)
            if bool == "Low" then 
                getgenv().crosshair.spin_speed = 70
            elseif bool == "Medium" then
                getgenv().crosshair.spin_speed = 200
            elseif bool == "High" then
                getgenv().crosshair.spin_speed = 10000
            elseif bool == "Default" then
                getgenv().crosshair.spin_speed = Atlas.Crosshair.Spinning.Speed
            end
        end
    })

    crosshairresize:AddToggle('camlock', {
        Text = 'Enable',
        Default = getgenv().crosshair.resize, 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        getgenv().crosshair.resize = bool
    end)

    crosshairresize:AddInput('fov1', {
        Default = getgenv().crosshair.resize_speed,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Speed',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().crosshair.resize_speed = bool
        end
    })

    crosshairresize:AddDropdown('MyDropdown', {
        Values = {"Low", "Medium", "High", "Default"}, 
        Default =  Atlas.Crosshair.Resize['Speed Presets'],
        Multi = false, 
    
        Text = 'Speed Sets',
        Tooltip = '',
    
        Callback = function(bool)
            if bool == "Low" then 
                getgenv().crosshair.resize_speed = 70
            elseif bool == "Medium" then
                getgenv().crosshair.resize_speed = 200
            elseif bool == "High" then
                getgenv().crosshair.resize_speed = 10000
            elseif bool == "Default" then
                getgenv().crosshair.resize_speed = Atlas.Crosshair.Resize.Speed
            end
        end
    })

    antiautolo:AddToggle('fov1', {
        Text = 'Stomp',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.fov1:OnChanged(function(bool)
        if bool == true then
            RunService:BindToRenderStep("Auto-Stomp",0,function()
            game:GetService("ReplicatedStorage").MainEvent:FireServer("Stomp")
        end)
        elseif bool == false then
           RunService:UnbindFromRenderStep("Auto-Stomp")
        end
    end)

    antiautolo:AddToggle('fov1', {
        Text = 'Reload',
        Default = Atlas.Misc['Auto Reload'], 
        Tooltip = '',
    })
    
    Toggles.fov1:OnChanged(function(bool)
        Atlas.Misc['Auto Reload'] = bool
    end)

    antiautolo:AddToggle('fov1', {
        Text = 'Anti Slow',
        Default = Atlas.Misc['Anti Slow'], 
        Tooltip = '',
    })
    
    Toggles.fov1:OnChanged(function(bool)
        Atlas.Misc['Anti Slow'] = bool
    end)

    antiautolo:AddToggle('fov1', {
        Text = 'Anti Jump Cooldown',
        Default = Atlas.Misc['No Jumpcool Down'], 
        Tooltip = '',
    })
    
    Toggles.fov1:OnChanged(function(bool)
        getgenv().nojumpcooldown = bool
    end)

    macropart:AddToggle('fov1', {
        Text = 'Enable',
        Default = Atlas['Macro']['Enabled'], 
        Tooltip = '',
    })
    
    Toggles.fov1:OnChanged(function(bool)
        Atlas['Macro']['Enabled'] = bool
    end)

    macropart:AddDropdown('MyDropdown', {
        Values = {"IO", "Mouse"}, 
        Default =  Atlas['Macro']['Macro Type'],
        Multi = false, 
    
        Text = 'Macro Type',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas['Macro']['Macro Type'] = bool
        end
    })

    macropart:AddInput('fov1', {
        Default = Atlas['Macro'].Delay,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Delay',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Macro'].Delay = bool
        end
    })

    macropart:AddInput('fov1', {
        Default = Atlas['Macro'].Keybind,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Macro'].Keybind = bool
        end
    })

    strafs:AddToggle('strafeenable', {
        Text = 'Enable',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas['Target Aimbot']['Target Strafe'].Enabled = bool
    end)

    strafs:AddDropdown('MyDropdown', {
        Values =  {"Strafe", "Randomize"},
        Default =  Atlas['Target Aimbot']['Target Strafe'].Mode,
        Multi = false, 
    
        Text = 'Strafe Mode',
        Tooltip = '',
    
        Callback = function(bool)
        Atlas['Target Aimbot']['Target Strafe'].Mode = bool
    end})

    strafs:AddDivider()
    strafs:AddInput('fov1', {
        Default = Atlas['Target Aimbot']['Target Strafe'].Speed,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Speed',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Target Aimbot']['Target Strafe'].Speed = bool
        end
    })

    strafs:AddInput('fov1', {
        Default = Atlas['Target Aimbot']['Target Strafe'].Distance,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Distance',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Target Aimbot']['Target Strafe'].Distance = bool
        end
    })

    strafs:AddInput('fov1', {
        Default = Atlas['Target Aimbot']['Target Strafe'].Height,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Height',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Target Aimbot']['Target Strafe'].Height = bool
        end
    })

    strafs:AddInput('fov1', {
        Default = Atlas['Target Aimbot']['Target Strafe']['Randomize Maximum'],
        Numeric = true, 
        Finished = false, 
    
        Text = 'Randomize Maximum',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Target Aimbot']['Target Strafe']['Randomize Maximum'] = bool
        end
    })

    strafs:AddInput('fov1', {
        Default = Atlas['Target Aimbot']['Target Strafe']['Randomize Minimum'],
        Numeric = true, 
        Finished = false, 
    
        Text = 'Randomize Minimum',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Target Aimbot']['Target Strafe']['Randomize Minimum'] = bool
        end
    })

    ohokay:AddToggle('targetaimbot', {
        Text = 'Enable',
        Default = Atlas['Target Aimbot'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.targetaimbot:OnChanged(function(bool)
        Atlas['Target Aimbot'].Enabled = bool
    end)

    ohokay:AddToggle('targetaimbot', {
        Text = 'Use Hook Functions',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.targetaimbot:OnChanged(function(bool)
        getgenv().usehookfunctions = bool
    end)

    ohokay:AddDropdown('MyDropdown', {
        Values =  {"0.113", "0.115" , "0.117","0.12338" ,"0.11923283912031938191231281632312637123821763333312731833", "0.121316378910319876472890149871624"},
        Default =  2,
        Multi = false, 
    
        Text = 'Prediction Presets',
        Tooltip = '',
    
        Callback = function(bool)
        getgenv().PREDPRESETSTAR = bool
    end})

    ohokay:AddToggle('targetaimbot', {
        Text = 'Notify',
        Default = Atlas['Target Aimbot']['Notify'], 
        Tooltip = '',
    })
    
    Toggles.targetaimbot:OnChanged(function(bool)
        Atlas['Target Aimbot']['Notify'] = bool
    end)

    ohokay:AddToggle('targetaimbot', {
        Text = 'Auto Target / Lock',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.targetaimbot:OnChanged(function(bool)
        getgenv().autoselectplayerLOL = bool
    end)
getgenv().autoselectdelay = 0.5
    ohokay:AddInput('fov1', {
        Default = 1,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Delay',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().autoselectdelay = bool
        end
    })

    ohokay:AddToggle('strafeenable', {
        Text = 'View',
        Default = Atlas['Target Aimbot'].View, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas['Target Aimbot'].View = bool
    end)

    ohokay:AddToggle('strafeenable', {
        Text = 'Auto Shoot On Strafe',
        Default = Atlas['Target Aimbot']['Target Strafe']['Auto Shoot On Strafe'], 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas['Target Aimbot']['Target Strafe']['Auto Shoot On Strafe'] = bool
    end)

    ohokay:AddInput('fov1', {
        Default = Atlas['Target Aimbot'].Prediction,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Prediction',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Target Aimbot'].Prediction = bool
        end
    })

    ohokay:AddDropdown('MyDropdown', {
        Values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"}, 
        Default =  Atlas['Target Aimbot'].AimPart,
        Multi = false, 
    
        Text = 'AimPart',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas['Target Aimbot'].AimPart = bool
        end
    })

    movebruh1:AddToggle('camlock1', {
        Text = 'Fly',
        Default = Atlas.Misc.Fly.Enabled, 
        Tooltip = '',
    })
    
    Toggles.camlock1:OnChanged(function(bool)
        Atlas.Misc.Fly.Enabled = bool
    end)

    movebruh1:AddInput('fov1', {
        Default = Atlas.Misc.Fly.Speed,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Fly Speed',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc.Fly.Speed = bool
        end
    })

    movebruh1:AddInput('fov1', {
        Default = Atlas.Misc.Fly.Keybind,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Fly Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc.Fly.Keybind = bool
        end
    })

    movebruh1:AddToggle('camlock1', {
        Text = 'Movement Speed',
        Default = Atlas.Misc['Movement Speed'].Enabled, 
        Tooltip = 'dont go above 9.5 in dahood',
    })
    
    Toggles.camlock1:OnChanged(function(bool)
        Atlas.Misc['Movement Speed'].Enabled = bool
    end)

    movebruh1:AddDropdown('MyDropdown', {
        Values = {"CFrame", "Normal"}, 
        Default =  Atlas.Misc['Movement Speed'].Type,
        Multi = false, 
    
        Text = 'Movement Type',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Misc['Movement Speed'].Type = bool
        end
    })

    movebruh1:AddInput('fov1', {
        Default = Atlas.Misc['Movement Speed'].Speed,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Movement Speed',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Movement Speed'].Speed = bool
        end
    })

    movebruh1:AddInput('fov1', {
        Default = Atlas.Misc['Movement Speed'].Keybind,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Movement Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Movement Speed'].Keybind = bool
        end
    })

    movebruh1:AddToggle('camlock1', {
        Text = 'Spin bot',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.camlock1:OnChanged(function(bool)
        getgenv().SpinBottingLOL = bool
    end)
    getgenv().SpinBottingLOLSpeed = 8
    movebruh1:AddInput('fov1', {
        Default = 100,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Spin bot Speed',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().SpinBottingLOLSpeed = bool
        end
    })

    movebruh1:AddToggle('camlock1', {
        Text = 'Infinite Jump',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.camlock1:OnChanged(function(bool)
        getgenv().InfiniteJumpWOAHHH = bool
    end)

    movebruh1:AddToggle('camlock1', {
        Text = 'B-Hop',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.camlock1:OnChanged(function(bool)
        getgenv().BunnyHopYAY = bool
    end)

    movebruh1:AddInput('fov1', {
        Default = 2,
        Numeric = true, 
        Finished = false, 
    
        Text = 'B-Hop Amount',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().BunnyHopAmount = bool
        end
    })

    movebruh1:AddToggle('camlock1', {
        Text = 'No Animations',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.camlock1:OnChanged(function(bool)
        if bool then
            _G.Save1 = Client.Character.Animate.idle.Animation1.AnimationId
            _G.Save2 = Client.Character.Animate.run.RunAnim.AnimationId
            _G.Save3 = Client.Character.Animate.walk.WalkAnim.AnimationId
            _G.Save4 = Client.Character.Animate.fall.FallAnim.AnimationId
            _G.Save5 = Client.Character.Animate.jump.JumpAnim.AnimationId
            Client.Character.Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id=0"
            Client.Character.Animate.run.RunAnim.AnimationId =  "http://www.roblox.com/asset/?id=0"
            Client.Character.Animate.walk.WalkAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
            Client.Character.Animate.fall.FallAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
            Client.Character.Animate.jump.JumpAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        elseif _G.Save1 and _G.Save2 and _G.Save3 and _G.Save4 and _G.Save5 then
            Client.Character.Animate.idle.Animation1.AnimationId = _G.Save1
            Client.Character.Animate.run.RunAnim.AnimationId = _G.Save2
            Client.Character.Animate.walk.WalkAnim.AnimationId = _G.Save3
            Client.Character.Animate.fall.FallAnim.AnimationId = _G.Save4
            Client.Character.Animate.jump.JumpAnim.AnimationId = _G.Save
        end
    end)

    movebruh1:AddToggle('camlock1', {
        Text = 'Anti Void Kill',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.camlock1:OnChanged(function(bool)
        workspace.FallenPartsDestroyHeight = bool and -50000 or -500
    end)

    movebruh1:AddToggle('strafeenable', {
        Text = 'Auto Armor',
        Default = true, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().AutoArmor = bool
    end)

    movebruh1:AddDropdown('MyDropdown', {
        Values = {"High","Medium", "None"},
        Default = 3,
        Multi = false, 
    
        Text = 'Armor Type',
        Tooltip = '',
    
        Callback = function(bool)
            getgenv().armortype = bool
    end})

    movebruh1:AddToggle('strafeenable', {
        Text = 'Auto Pickup Cash',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().autopickupcash = bool 
    end)

    movebruh1:AddToggle('camlock1', {
        Text = 'Fake Character Orientation',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.camlock1:OnChanged(function(bool)
        getgenv().characterfacing = bool
    end)

    movebruh1:AddDropdown('MyDropdown', {
        Values = {"Backwards","Forwards","Left","Right","None"},
        Default = 6,
        Multi = false, 
    
        Text = 'Orientation Position',
        Tooltip = '',
    
        Callback = function(bool)
            getgenv().facingtype = bool
        end})


    csynccccbruhhhhhhhhhh:AddToggle('strafeenable', {
        Text = 'C-Sync',
        Default = getgenv().csyncenabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().csyncenabled = bool
    end)

    csynccccbruhhhhhhhhhh:AddInput('fov1', {
        Default = Atlas['Target Aimbot']['Target Strafe']['C-Sync'].Keybind,
        Numeric = false, 
        Finished = false, 
    
        Text = 'C-Sync Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Target Aimbot']['Target Strafe']['C-Sync'].Keybind = bool
        end
    })

    csynccccbruhhhhhhhhhh:AddToggle('strafeenable', {
        Text = 'Notify',
        Default = Atlas['Target Aimbot']['Target Strafe']['C-Sync'].Notify, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas['Target Aimbot']['Target Strafe']['C-Sync'].Notify = bool
    end)

    csynccccbruhhhhhhhhhh:AddToggle('strafeenable', {
        Text = 'Visualize',
        Default = getgenv().visualizedummy, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().visualizedummy = bool
    end)

    csynccccbruhhhhhhhhhh:AddToggle('strafeenable', {
        Text = 'Auto Shoot On C-Sync',
        Default = getgenv().csyncautoshoot, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().csyncautoshoot = bool
    end)

    csynccccbruhhhhhhhhhh:AddDropdown('MyDropdown', {
        Values = {"Random (On Target)", "Under Ground (On Target)", "Random","FuckThisShitUp","None"},
        Default = 6,
        Multi = false, 
    
        Text = 'C-Sync Mode',
        Tooltip = '',
    
        Callback = function(bool)
            getgenv().csynctype = bool
    end})
    csynccccbruhhhhhhhhhh:AddDivider()

    csynccccbruhhhhhhhhhh:AddInput('fov1', {
        Default = getgenv().csyncrandomdistance,
        Numeric = true, 
        Finished = false, 
    
        Text = 'C-Sync Random Distance',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().csyncrandomdistance = bool
        end
    })

    hitlogsfordaopps:AddToggle('strafeenable', {
        Text = 'Enable',
        Default = Atlas.Misc.Hit.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.Hit.Enabled = bool
        --[[if bool == true then
            wait(0.3)
            Notifications:Notification("hit sounds has been disabled until further notice",3, false)  
        end--]]
    end)

    hitlogsfordaopps:AddToggle('strafeenable', {
        Text = 'Hit Sounds',
        Default = Atlas.Misc.Hit['Hit Sounds'], 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.Hit['Hit Sounds'] = bool
    end)


    hitlogsfordaopps:AddToggle('strafeenable', {
        Text = 'Logs',
        Default = Atlas.Misc.Hit.Logs, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.Hit.Logs = bool
    end)


    hitlogsfordaopps:AddInput('fov1', {
        Default = Atlas.Misc.Hit.Volume,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Volume',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc.Hit.Volume = bool / 100
        end
    })

    hitlogsfordaopps:AddDropdown('MyDropdown', {
        Values = {"Rust", "Bameware", "Bubble", "Pick", "Pop", "Sans", "Fart", "Big", "Vine", "Bruh", "Skeet", "Neverlose", "Fatality", "Bonk","Minecraft"},
        Default = Atlas.Misc.Hit.Sound,
        Multi = false, 
    
        Text = 'Volume',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Misc.Hit.Sound = bool
    end})

    --[[hitlogsfordaopps:AddToggle('strafeenable', {
        Text = 'Hit Chams',
        Default = Atlas.Misc.Hit['Hit Chams'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.Hit['Hit Chams'].Enabled = bool
    end)

    hitlogsfordaopps:AddDropdown('MyDropdown', {
        Values = {"Neon", "Plastic", "Brick", "ForceField"},
        Default = Atlas.Misc.Hit['Hit Chams'].Material,
        Multi = false, 
    
        Text = 'Hit Chams Material',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Misc.Hit['Hit Chams'].Material = bool
        end})

    hitlogsfordaopps:AddLabel('Hit Chams Color'):AddColorPicker('ColorPicker', {
        Default = Color3.fromRGB(255, 255, 255),
        Title = 'Color', 
        Callback = function(Value)
        end
    })
        
    Options.ColorPicker:OnChanged(function(bool)
        Atlas.Misc.Hit['Hit Chams'].Color = bool
    end)
        
    hitlogsfordaopps:AddInput('fov1', {
        Default = Atlas.Misc.Hit['Hit Chams'].Time,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Time',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc.Hit['Hit Chams'].Time = bool
        end
    })

    hitlogsfordaopps:AddInput('fov1', {
        Default = Atlas.Misc.Hit['Hit Chams'].Transparency,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Transparency',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc.Hit['Hit Chams'].Transparency = bool
        end
    })--]]

    teleportherebruh:AddDropdown('MyDropdown', {
        Values = {"None","Uphill","Military","Park","Downhill","Double Barrel","Casino","Trailer","School","Revolver","Bank","Sewer","Fire Station","Hood Fitness","Hood Kicks","Jail","Church"},
        Default = 1,
        Multi = false, 
    
        Text = 'Teleports',
        Tooltip = '',
    
        Callback = function(bool)
            tplocation = bool
    end})

    teleportherebruh:AddButton({
        Text = 'Teleport',
        Func = function()
            tp(tplocation) 
        end,
        DoubleClick = false,
        Tooltip = ''
    })

    atmfarms:AddToggle('strafeenable', {
        Text = 'Enable',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().enablefarms = bool
    end)

    atmfarms:AddDropdown('MyDropdown', {
        Values = {"ATM","None"},
        Default = 5,
        Multi = false, 
    
        Text = 'Farms Type',
        Tooltip = '',
    
        Callback = function(bool)
            getgenv().farmstype = bool
    end})

    velocityspoofer:AddToggle('strafeenable', {
        Text = 'Enable',
        Default = Atlas.Misc['Anti Lock'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc['Anti Lock'].Enabled = bool
    end)

    velocityspoofer:AddInput('fov1', {
        Default = Atlas.Misc['Anti Lock'].Keybind,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Anti Lock Keybind',
        Tooltip = '', 

        Placeholder = '', 
    
    Callback = function(bool)
        Atlas.Misc['Anti Lock'].Keybind = bool
    end})

    velocityspoofer:AddToggle('strafeenable', {
        Text = 'Notify',
        Default = Atlas.Misc['Anti Lock'].Notify, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc['Anti Lock'].Notify = bool
    end)

    velocityspoofer:AddToggle('strafeenable', {
        Text = 'Show Velocity',
        Default = Atlas.Misc['Anti Lock']['Show Velocity'], 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc['Anti Lock']['Show Velocity'] = bool
    end)

    velocityspoofer:AddToggle('strafeenable', {
        Text = 'Show Visualization',
        Default = Atlas.Misc['Anti Lock']['Show Visualization'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc['Anti Lock']['Show Visualization'].Enabled = bool
    end)

    velocityspoofer:AddDropdown('MyDropdown', {
        Values = {"Dot","Line"},
        Default = Atlas.Misc['Anti Lock']['Show Visualization'].Type,
        Multi = false, 
    
        Text = 'Visualization Type',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Misc['Anti Lock']['Show Visualization'].Type = bool
        end})


    velocityspoofer:AddDropdown('MyDropdown', {
        Values = {"Sky","Ground","Random","Velocity Multiplier","Offset", "Destroy Sigma Cheaters GRR"},
        Default = Atlas.Misc['Anti Lock'].Type,
        Multi = false, 
    
        Text = 'Velocity Type',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Misc['Anti Lock'].Type = bool
        end})

    velocityspoofer:AddInput('fov1', {
        Default = Atlas.Misc['Anti Lock'].Offset.X,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Offset X',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Anti Lock'].Offset.X = bool
        end})

    velocityspoofer:AddInput('fov1', {
        Default = Atlas.Misc['Anti Lock'].Offset.Y,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Offset Y',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Anti Lock'].Offset.Y = bool
        end})

    velocityspoofer:AddInput('fov1', {
        Default = Atlas.Misc['Anti Lock'].Offset.Z,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Offset Z',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Anti Lock'].Offset.Z = bool
        end})

    velocityspoofer:AddInput('keybindanti', {
        Default = Atlas.Misc['Anti Lock'].Multiplier.Power,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Velocity Multiplier Power',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Anti Lock'].Multiplier.Power = bool
    end})

    selflooks:AddToggle('strafeenable', {
        Text = 'Enable',
        Default = getgenv().SelfTrail, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().SelfTrail = bool
    end)

    selflooks:AddInput('keybindanti', {
        Default = getgenv().trailsize,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Trail Size',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().trailsize = bool
    end})

    selflooks:AddInput('keybindanti', {
        Default = getgenv().trailrefreshrate,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Trail Refresh Rate',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().trailrefreshrate = bool
    end})

    selflooks:AddInput('keybindanti', {
        Default = getgenv().traildelay,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Trail Delay',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().traildelay = bool
    end})

    selflooks:AddDropdown('MyDropdown', {
        Values = {"Plastic","ForceField","Neon","Glass", "Brick"},
        Default = 2,
        Multi = false, 
    
        Text = 'Trail Material',
        Tooltip = '',
    
        Callback = function(bool)
            getgenv().trailmaterial = bool
    end})

    selflooks:AddLabel('Trail Color'):AddColorPicker('ColorPicker', {
        Default = Color3.fromRGB(255, 255, 255),
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        getgenv().trailcolor = bool
    end)
    
    selfconehat:AddToggle('strafeenable', {
        Text = 'Enable',
        Default = Atlas.Misc['Cone Hat'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc['Cone Hat'].Enabled = bool
    end)

    selfconehat:AddInput('keybindanti', {
        Default = Atlas.Misc['Cone Hat']['Hat Visibility'],
        Numeric = true, 
        Finished = false, 
    
        Text = 'Hat Visibility',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Cone Hat']['Hat Visibility'] = bool
    end})

    selfconehat:AddInput('keybindanti', {
        Default = Atlas.Misc['Cone Hat']['Circle Visibility'],
        Numeric = true, 
        Finished = false, 
    
        Text = 'Circle Visibility',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Cone Hat']['Circle Visibility'] = bool
    end})

    selfconehat:AddInput('keybindanti', {
        Default = Atlas.Misc['Cone Hat'].Height,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Height',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Cone Hat'].Height = bool
    end})

    selfconehat:AddInput('keybindanti', {
        Default = Atlas.Misc['Cone Hat'].Radius,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Radius',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Cone Hat'].Radius = bool
    end})

    selfconehat:AddInput('keybindanti', {
        Default = Atlas.Misc['Cone Hat'].Sides,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Sides',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Misc['Cone Hat'].Sides = bool
    end})

    selfconehat:AddToggle('strafeenable', {
        Text = 'Rainbow',
        Default = Atlas.Misc['Cone Hat'].Rainbow, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc['Cone Hat'].Rainbow = bool
    end)

    selfconehat:AddLabel('Trail Color'):AddColorPicker('ColorPicker', {
        Default = Color3.fromRGB(255, 255, 255),
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas.Misc['Cone Hat'].Color = bool
    end)

    customsky:AddToggle('strafeenable', {
        Text = 'Enable',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().skybox = bool
    end)

    customsky:AddDropdown('MyDropdown', {
        Values = {"Pink Sky", "Nebula", "Red Sky", "Purple Sky", "Green Sky", "Space", "Dark Night"},
        Default = 1,
        Multi = false, 
    
        Text = 'Sky Box',
        Tooltip = '',
    
        Callback = function(bool)
            getgenv().theskybox = bool
    end})
    
    onlyicanseeyou:AddToggle('strafeenable', {
        Text = 'Headless',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().headlessclient = bool
    end)

    RunService.heartbeat:Connect(function()
        if getgenv().togglemyfovXDD == true then 
            Camera.FieldOfView = getgenv().changemyfovnowXD
        elseif getgenv().togglemyfovXDD == false then
            Camera.FieldOfView = 70
        end
    end)

    RunService.heartbeat:Connect(function()
        if getgenv().AutoArmor then 
            if Client.Character:WaitForChild("BodyEffects").Armor.Value < 100 then 
                local Pos = Client.Character:WaitForChild("HumanoidRootPart").CFrame
                if getgenv().armortype == "High" then
                    Client.Character:WaitForChild("HumanoidRootPart").CFrame = workspace.Ignored.Shop["[High-Medium Armor] - $2440"].Head.CFrame
                    fireclickdetector(workspace.Ignored.Shop["[High-Medium Armor] - $2440"].ClickDetector)
                elseif getgenv().armortype == "Medium" then
                    Client.Character:WaitForChild("HumanoidRootPart").CFrame = workspace.Ignored.Shop["[Medium Armor] - $1061"].Head.CFrame
                    fireclickdetector(workspace.Ignored.Shop["[Medium Armor] - $1061"].ClickDetector)
                    RunService.RenderStepped:Wait()
                    Client.Character:WaitForChild("HumanoidRootPart").CFrame = Pos 
                end 
            end
        end 
    end)

    if tick() - antiCheattick > 1 and Client.Character then 
        antiCheattick = tick() 
        -- 
        for _, Script in pairs(Client.Character:GetChildren()) do
            if Script:IsA("Script") and Script.Name ~= "Health" and Script.Name ~= "Sound" and Script:FindFirstChild("LocalScript") then
                Script:Destroy()
            end
        end
    end 	

    RunService.heartbeat:Connect(function()
        if getgenv().infiniteCameraZoomLOL == true then
            Client.CameraMaxZoomDistance = math.huge
        else 
            Client.CameraMaxZoomDistance = 35
        end
    end)

    RunService.heartbeat:Connect(function()
        if getgenv().SpinBottingLOL then
            Client.Character.Humanoid.AutoRotate = true
            Client.Character:WaitForChild("HumanoidRootPart").CFrame = Client.Character:WaitForChild("HumanoidRootPart").CFrame * CFrame.Angles(0,math.rad(getgenv().SpinBottingLOLSpeed),0)
        end
    end)

    RunService.heartbeat:Connect(function()
        if getgenv().characterfacing and getgenv().facingtype == "Backwards" then
            local currentPosition = humanoidRootPart.Position
            local lockedOrientation = CFrame.new(currentPosition) * CFrame.Angles(0, math.rad(180), 0)
            humanoidRootPart.CFrame = lockedOrientation + humanoidRootPart.CFrame.LookVector * 0.01 
        elseif getgenv().characterfacing and getgenv().facingtype == "Forwards" then
            local currentPosition = humanoidRootPart.Position
            local forwardOrientation = CFrame.new(currentPosition) * CFrame.Angles(0, 0, 0)
            humanoidRootPart.CFrame = forwardOrientation + humanoidRootPart.CFrame.LookVector * 0.01
        elseif getgenv().characterfacing and getgenv().facingtype == "Left" then
            local currentPosition = humanoidRootPart.Position
            local leftOrientation = CFrame.new(currentPosition) * CFrame.Angles(0, math.rad(-90), 0)
            humanoidRootPart.CFrame = leftOrientation + humanoidRootPart.CFrame.LookVector * 0.01
        elseif getgenv().characterfacing and getgenv().facingtype == "Right" then
            local currentPosition = humanoidRootPart.Position
            local rightOrientation = CFrame.new(currentPosition) * CFrame.Angles(0, math.rad(90), 0)
            humanoidRootPart.CFrame = rightOrientation + humanoidRootPart.CFrame.LookVector * 0.01
        end
    end)




    RunService.heartbeat:Connect(function()
        if getgenv().autopickupcash then
            pcall(function()
                for _, v in pairs(Workspace.Ignored.Drop:GetChildren()) do
                    if v.Name == "MoneyDrop" then
                        local MoneyMagnitude = (v.Position - Client.Character:WaitForChild("HumanoidRootPart").Position).magnitude
                        if MoneyMagnitude < 25 then
                            fireclickdetector(v.ClickDetector)
                        end
                    end
                end
            end)
        end
    end)

    local InfJump = UserInputService.InputBegan:Connect(function(inp)
        if inp.KeyCode == Enum.KeyCode.Space then 
            if getgenv().InfiniteJumpWOAHHH then 
                Client.Character.Humanoid:ChangeState("Jumping")
                Client.Character.Humanoid.UseJumpPower = false
            end
        end 
    end)

    onlyicanseeyou:AddToggle('strafeenable', {
        Text = 'Camera FOV',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().togglemyfovXDD = bool 
    end)
    getgenv().changemyfovnowXD = 70
    onlyicanseeyou:AddInput('keybindanti', {
        Default = getgenv().changemyfovnowXD,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Camera FOV',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            getgenv().changemyfovnowXD = bool
        end})

    onlyicanseeyou:AddToggle('strafeenable', {
        Text = 'Infinite Camera Zoom',
        Default = false, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        getgenv().infiniteCameraZoomLOL = bool 
    end)

    esplolstfu:AddToggle('strafeenable', {
        Text = 'Enabled',
        Default = Atlas.Misc.ESP.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.ESP.Enabled = bool
    end)

    esplolstfu:AddToggle('strafeenable', {
        Text = 'Box',
        Default = Atlas.Misc.ESP.Box.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.ESP.Box.Enabled = bool
    end)

    esplolstfu:AddLabel('Box Color'):AddColorPicker('ColorPicker', {
        Default = Atlas.Misc.ESP.Box.Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas.Misc.ESP.Box.Color = bool
    end)

    esplolstfu:AddToggle('strafeenable', {
        Text = 'Names',
        Default = Atlas.Misc.ESP.Names.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.ESP.Names.Enabled = bool
    end)

    esplolstfu:AddLabel('Names Color'):AddColorPicker('ColorPicker', {
        Default = Atlas.Misc.ESP.Names.Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas.Misc.ESP.Names.Color = bool
    end)

    esplolstfu:AddToggle('strafeenable', {
        Text = 'Health Bar',
        Default = Atlas.Misc.ESP.HealthBar.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.ESP.HealthBar.Enabled = bool
    end)

    esplolstfu:AddLabel('Health Bar Color'):AddColorPicker('ColorPicker', {
        Default = Atlas.Misc.ESP.HealthBar.Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas.Misc.ESP.HealthBar.Color = bool
    end)

    Options.ColorPicker:SetValueRGB(Color3.fromRGB(0, 255, 0))

    esplolstfu:AddToggle('strafeenable', {
        Text = 'Armor Bar',
        Default = Atlas.Misc.ESP.ArmorBar.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.ESP.ArmorBar.Enabled = bool
    end)

    esplolstfu:AddLabel('Armor Bar Color'):AddColorPicker('ColorPicker', {
        Default = Atlas.Misc.ESP.ArmorBar.Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas.Misc.ESP.ArmorBar.Color = bool
    end)

    Options.ColorPicker:SetValueRGB(Color3.fromRGB(106, 167, 255))

    esplolstfu:AddToggle('strafeenable', {
        Text = 'Tracers',
        Default = Atlas.Misc.ESP.Tracer.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.ESP.Tracer.Enabled = bool
    end)

    esplolstfu:AddDropdown('MyDropdown', {
        Values = {"Screen", "Mouse"},
        Default = Atlas.Misc.ESP.Tracer.Method,
        Multi = false, 
    
        Text = 'Tracer Type',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas.Misc.ESP.Tracer.Method = bool
    end})
    
    esplolstfu:AddLabel('Tracers Color'):AddColorPicker('ColorPicker', {
        Default = Atlas.Misc.ESP.Tracer.Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas.Misc.ESP.Tracer.Color = bool
    end)

    esplolstfu:AddToggle('strafeenable', {
        Text = 'Weapon',
        Default = Atlas.Misc.ESP.Tool.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.ESP.Tool.Enabled = bool
    end)

    esplolstfu:AddLabel('Weapon Color'):AddColorPicker('ColorPicker', {
        Default = Atlas.Misc.ESP.Tool.Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas.Misc.ESP.Tool.Color = bool
    end)

    esplolstfu:AddToggle('strafeenable', {
        Text = 'Distance',
        Default = Atlas.Misc.ESP.Distance.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.Misc.ESP.Distance.Enabled = bool
    end)

    lookattheworlddd:AddToggle('strafeenable', {
        Text = 'Enable',
        Default = Atlas.World.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.World.Enabled = bool
        if Atlas.World.Enabled == true then
            save1 = Lighting.FogColor
            save2 = Lighting.FogStart
            save3 = Lighting.FogEnd
            save4 = Lighting.Ambient
            save5 = Lighting.Brightness 
            if Atlas.World.Fog.Enabled == true then
                Lighting.FogColor = Atlas.World.Fog.Color
                Lighting.FogStart = Atlas.World.Fog.Start
                Lighting.FogEnd = Atlas.World.Fog.End
            elseif Atlas.World.Ambient.Enabled == true then
                Lighting.Ambient = Atlas.World.Ambient.Color 
            elseif Atlas.World.Brightness.Enabled == true then
                Lighting.Brightness = Atlas.World.Brightness.Amount
            else 
                Lighting.FogColor = save1
                Lighting.FogStart = save2
                Lighting.FogEnd = save3
                Lighting.Ambient = save4
                Lighting.Brightness = save5
            end 
        end
    end)

    lookattheworlddd:AddToggle('strafeenable', {
        Text = 'Fog',
        Default = Atlas.World.Fog.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.World.Fog.Enabled = bool
    end)

    Atlas.World.Fog.Start = 22
    lookattheworlddd:AddInput('keybindanti', {
        Default = Atlas.World.Fog.Start,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Fog Start',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.World.Fog.Start = bool
    end})
    Atlas.World.Fog.End = 600
    lookattheworlddd:AddInput('keybindanti', {
        Default = Atlas.World.Fog.End,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Fog End',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.World.Fog.End = bool
    end})

    lookattheworlddd:AddLabel('Fog Color'):AddColorPicker('ColorPicker', {
        Default = Atlas.World.Fog.Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas.World.Fog.Color = bool
    end)

    lookattheworlddd:AddToggle('strafeenable', {
        Text = 'Ambient',
        Default = Atlas.World.Ambient.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.World.Ambient.Enabled = bool
    end)

    lookattheworlddd:AddLabel('Ambient Color'):AddColorPicker('ColorPicker', {
        Default = Atlas.World.Ambient.Color,
        Title = 'Color', 
    })
    
    Options.ColorPicker:OnChanged(function(bool)
        Atlas.World.Ambient.Color = bool
    end)

    lookattheworlddd:AddToggle('strafeenable', {
        Text = 'Brightness',
        Default = Atlas.World.Brightness.Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.World.Brightness.Enabled = bool
    end)

    lookattheworlddd:AddInput('keybindanti', {
        Default = Atlas.World.Brightness.Amount,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Brightness Amount',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.World.Brightness.Amount = bool
    end})


    lookattheworlddd:AddToggle('strafeenable', {
        Text = 'Clock Time',
        Default = Atlas.World['Clock Time'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.World['Clock Time'].Enabled = bool
    end)

    lookattheworlddd:AddInput('keybindanti', {
        Default = Atlas.World['Clock Time'].Amount,
        Numeric = true, 
        Finished = false, 
    
        Text = 'Clock Amount',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.World['Clock Time'].Amount = bool
    end})

    lookattheworlddd:AddToggle('strafeenable', {
        Text = 'World Exposure',
        Default = Atlas.World['World Exposure'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.strafeenable:OnChanged(function(bool)
        Atlas.World['World Exposure'].Enabled = bool
    end)

    lookattheworlddd:AddInput('keybindanti', {
        Default = Atlas.World['World Exposure'].Amount,
        Numeric = true, 
        Finished = false, 
    
        Text = 'World Exposure Amount',
        Tooltip = '', 

        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.World['World Exposure'].Amount = bool
    end})

    bindsonlylol:AddInput('fov1', {
        Default = Atlas.Binds.Aimbot,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Aimbot Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Binds.Aimbot = bool
        end
    })

    bindsonlylol:AddInput('fov1', {
        Default = Atlas.Binds['Mouse Assist'],
        Numeric = false, 
        Finished = false, 
    
        Text = 'Mouse Assist Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Binds['Mouse Assist'] = bool
        end
    })

    bindsonlylol:AddInput('fov1', {
        Default = Atlas.Binds['Target Aimbot'],
        Numeric = false, 
        Finished = false, 
    
        Text = 'Target Aimbot Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Binds['Target Aimbot'] = bool
        end
    })

    bindsonlylol:AddInput('fov1', {
        Default = Atlas.Binds.Resolving,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Resolving Keybind',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas.Binds.Resolving = bool
        end
    })

    mymousehand:AddToggle('enabledcam', {
        Text = 'Enable',
        Default = Atlas['Mouse Assist'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.enabledcam:OnChanged(function(bool)
        Atlas['Mouse Assist'].Enabled = bool
    end)

    mymousehand:AddToggle('camlock1', {
        Text = 'Notify',
        Default = Atlas['Mouse Assist'].Notify, 
        Tooltip = '',
    })
    
    Toggles.camlock1:OnChanged(function(bool)
        Atlas['Mouse Assist'].Notify = bool
    end)

    mymousehand:AddInput('autopredtext', {
        Default = Atlas['Mouse Assist'].Prediction,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Mouse Asist Prediction',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Mouse Assist'].Prediction = bool
        end
    })
    
    mymousehand:AddInput('MyTextbox', {
        Default = Atlas['Mouse Assist'].Smoothing,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Mouse Assist Smoothing',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Atlas['Mouse Assist'].Smoothing = bool
        end
    })

    mymousehand:AddDropdown('MyDropdown', {
        Values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg",  "LeftUpperLeg", "RightLowerLeg", "RightFoot",  "RightUpperLeg"}, 
        Default = Atlas['Mouse Assist'].AimPart,
        Multi = false, 
    
        Text = 'AimPart',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas['Mouse Assist'].AimPart = bool
        end
    })

    mymousehand:AddToggle('camlock', {
        Text = 'Auto Flick',
        Default = Atlas['Mouse Assist']['Auto Flick'].Enabled, 
        Tooltip = '',
    })
    
    Toggles.camlock:OnChanged(function(bool)
        Atlas['Mouse Assist']['Auto Flick'].Enabled = bool
    end)

    mymousehand:AddDropdown('MyDropdown', {
        Values = {"Head", "UpperTorso", "LowerTorso","HumanoidRootPart"}, 
        Default = Atlas['Mouse Assist']['Auto Flick']['Flick To'],
        Multi = false, 
    
        Text = 'Flick To',
        Tooltip = '',
    
        Callback = function(bool)
            Atlas['Mouse Assist']['Auto Flick']['Flick To'] = bool
        end
    })


    playsoundssir:AddDropdown('MyDropdown', {
        Values = {"None","Relaxed Scene", "tycoon music sigma", "raining tacos","ur sigma","griddy skibidi","shitty ass love song","kid sings sigma song","Custom"}, 
        Default = 1,
        Multi = false, 
    
        Text = 'Sounds To Play',
        Tooltip = '',
    
        Callback = function(bool)
            Soundslol = bool
        end
    })

    playsoundssir:AddInput('MyTextbox', {
        Default = 0,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Custom ID',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            customsoundid = bool
        end
    })

    playsoundssir:AddButton('Play', function()  
        if Soundslol == "Relaxed Scene" then  
            sound.SoundId = "rbxassetid://1848354536"  
            sound.Volume = Soundsvolumelol 
            sound.Looped = true
            sound:Play()
        elseif Soundslol == "tycoon music sigma" then 
            sound.SoundId = "rbxassetid://1837879082"  
            sound.Volume = Soundsvolumelol 
            sound.Looped = true
            sound:Play()
        elseif Soundslol == "raining tacos" then 
            sound.SoundId = "rbxassetid://142376088"  
            sound.Volume = Soundsvolumelol 
            sound.Looped = true
            sound:Play()
        elseif Soundslol == "ur sigma" then 
            sound.SoundId = "rbxassetid://16190757458"  
            sound.Volume = Soundsvolumelol 
            sound.Looped = true
            sound:Play()
        elseif Soundslol == "griddy skibidi" then 
            sound.SoundId = "rbxassetid://16662827543"  
            sound.Volume = Soundsvolumelol 
            sound.Looped = true
            sound:Play()
        elseif Soundslol == "shitty ass love song" then 
            sound.SoundId = "rbxassetid://15689439571"  
            sound.Volume = Soundsvolumelol 
            sound.Looped = true
            sound:Play()
        elseif Soundslol == "kid sings sigma song" then 
            sound.SoundId = "rbxassetid://16662832129"  
            sound.Volume = Soundsvolumelol 
            sound.Looped = true
            sound:Play()
        elseif Soundslol == "None"  then
            sound:Stop()
        elseif Soundslol == "Custom" and customsoundid then 
            sound2:Play()
            sound2.Looped = true
        elseif customsoundid == nil then
            return
            print("no custom soundid to play")
        end 
    end)

    playsoundssir:AddButton('Stop', function()  
        if sound or sound2 then 
            sound:Stop()
            sound2:Stop()
        elseif sound or sound2 == nil then
            Notifications:Notification("there is no sound playing rn",2, false)  
        end
    end)

    playsoundssir:AddDivider()
    Soundsvolumelol = 1
    playsoundssir:AddInput('MyTextbox', {
        Default = 1,
        Numeric = false, 
        Finished = false, 
    
        Text = 'Volume',
        Tooltip = '', 
    
        Placeholder = '', 
    
        Callback = function(bool)
            Soundsvolumelol = bool
        end
    })
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind 

MenuGroup:AddButton('Unload', function() 
    Library:Unload()
end)

MenuGroup:AddButton('Server Hop', function() 
    local servers = game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=10")
    local serverData = HttpService:JSONDecode(servers)
    local server = serverData.data[math.random(1, #serverData.data)]
    game:GetService('TeleportService'):TeleportToPlaceInstance(game.PlaceId, server.id)
end)

MenuGroup:AddButton('Join Discord (Copies Discord)', function() 
    setclipboard('discord.gg/5WwU8Zwxcu')
    wait(0.6)
    Notifications:Notification("discord.gg/5WwU8Zwxcu or copied to clipboard",6, false)  
end)

MenuGroup:AddButton('Rejoin', function() 
    game:GetService('TeleportService'):TeleportToPlaceInstance(game.PlaceId, game.JobId, Client)
end)

MenuGroup:AddToggle('strafeenable', {
    Text = 'Performance Mode',
    Default = false, 
    Tooltip = '',
})

Toggles.strafeenable:OnChanged(function(PerformanceModeEnabled)
    if PerformanceModeEnabled then
        ApplyPerformanceMode()
    else
        RevertToRegularGraphics()
    end
end)

MenuGroup:AddToggle('strafeenable', {
    Text = 'Players Join / Leave Notify',
    Default = false, 
    Tooltip = '',
})

Toggles.strafeenable:OnChanged(function(bool)
    getgenv().notifyifleftorjoined = bool
end)

MenuGroup:AddDropdown('MyDropdown', {
    Values = {"Notify", "Print", "Warn" ,"None"},
    Default = 5,
    Multi = false, 

    Text = 'Notify Type',
    Tooltip = '',

    Callback = function(bool)
        getgenv().joinleavemode = bool
end})

Players.PlayerAdded:Connect(function(player)
    if getgenv().notifyifleftorjoined and getgenv().joinleavemode == "Notify" then
        Notifications:Notification(player.Name .. " has joined the game",3, false)  
    elseif getgenv().notifyifleftorjoined and getgenv().joinleavemode == "Print" then
        print(player.Name .. " has joined the game")
    elseif getgenv().notifyifleftorjoined and getgenv().joinleavemode == "Warn" then
        warn(player.Name .. " has joined the game")
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if getgenv().notifyifleftorjoined and getgenv().joinleavemode == "Notify" then
        Notifications:Notification(player.Name .. " has left" ,3, false)  
    elseif getgenv().notifyifleftorjoined and getgenv().joinleavemode == "Print" then
        print(player.Name .. " has left the game")
    elseif getgenv().notifyifleftorjoined and getgenv().joinleavemode == "Warn" then
        warn(player.Name .. " has left the game")
    end
    if player == TargetPlayer then
        Notifications:Notification("your victim: " ..TargetPlayer.Name .. " has raged xd" ,3, false)
        placemarker.CFrame = CFrame.new(0, 9999, 0)
        TargetLine.Visible = false
        TargetUI.Visible = false
        return
    end 
end)

if UserInputService.TouchEnabled then
    MenuGroup:AddButton('Client Stats', function() 
        RunService.RenderStepped:Connect(function()
            l.Visible = true
            local fps = math.floor(1 / RunService.RenderStepped:Wait())
            local cpu = game:GetService("Stats"):GetTotalMemoryUsageMb()
            local ping = math.floor(game:GetService("Stats").Network.ServerStatsItem['Data Ping']:GetValue())
            l.Text = string.format("FPS %d GPU N/A CPU %d%% LAT %dms", fps, cpu, ping)
        end)
    end)
end

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
ThemeManager:SetFolder('Atlas')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()
SaveManager:SetFolder('Atlas')
ThemeManager:ApplyToTab (Tabs['UI Settings'])
Atlas_LOADED_SCRIPT = true
Notifications:Notification("Atlas Loaded",3, false)  
else
    Notifications:Notification("Updated Table Config",3, false)  
end
end
-- // source made by streetgunna291 nega -_- >.<

-- // Rewrite Logs (1/10/2024)
-- // [Rewrote Target Aimbot]
-- // [Rewrote Target Strafe]

--[[

Sneaky Sneaky Source






























-]]
